"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>k,kt:()=>s});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},k=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,m=e.parentName,k=p(e,["components","mdxType","originalType","parentName"]),d=o(n),N=l,s=d["".concat(m,".").concat(N)]||d[N]||u[N]||r;return n?a.createElement(s,i(i({ref:t},k),{},{components:n})):a.createElement(s,i({ref:t},k))}));function s(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=N;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[d]="string"==typeof e?e:l,i[1]=p;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},49881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>s,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],p={id:"sql-functions",title:"All Druid SQL functions",sidebar_label:"All functions"},m=void 0,o={unversionedId:"querying/sql-functions",id:"querying/sql-functions",title:"All Druid SQL functions",description:"\x3c!--",source:"@site/docs/32.0.0/querying/sql-functions.md",sourceDirName:"querying",slug:"/querying/sql-functions",permalink:"/docs/32.0.0/querying/sql-functions",draft:!1,tags:[],version:"current",frontMatter:{id:"sql-functions",title:"All Druid SQL functions",sidebar_label:"All functions"},sidebar:"docs",previous:{title:"Overview and syntax",permalink:"/docs/32.0.0/querying/sql"},next:{title:"Tips for writing good queries",permalink:"/docs/32.0.0/querying/tips-good-queries"}},k={},d=[{value:"Example data",id:"example-data",level:2},{value:"ABS",id:"abs",level:2},{value:"ACOS",id:"acos",level:2},{value:"ANY_VALUE",id:"any_value",level:2},{value:"APPROX_COUNT_DISTINCT",id:"approx_count_distinct",level:2},{value:"APPROX_COUNT_DISTINCT_BUILTIN",id:"approx_count_distinct_builtin",level:2},{value:"APPROX_COUNT_DISTINCT_DS_HLL",id:"approx_count_distinct_ds_hll",level:2},{value:"APPROX_COUNT_DISTINCT_DS_THETA",id:"approx_count_distinct_ds_theta",level:2},{value:"APPROX_QUANTILE",id:"approx_quantile",level:2},{value:"APPROX_QUANTILE_DS",id:"approx_quantile_ds",level:2},{value:"APPROX_QUANTILE_FIXED_BUCKETS",id:"approx_quantile_fixed_buckets",level:2},{value:"ARRAY",id:"array",level:2},{value:"ARRAY_AGG",id:"array_agg",level:2},{value:"ARRAY_APPEND",id:"array_append",level:2},{value:"ARRAY_CONCAT",id:"array_concat",level:2},{value:"ARRAY_CONCAT_AGG",id:"array_concat_agg",level:2},{value:"ARRAY_CONTAINS",id:"array_contains",level:2},{value:"Scalar",id:"scalar",level:3},{value:"Array",id:"array-1",level:3},{value:"ARRAY_LENGTH",id:"array_length",level:2},{value:"ARRAY_OFFSET",id:"array_offset",level:2},{value:"ARRAY_OFFSET_OF",id:"array_offset_of",level:2},{value:"ARRAY_ORDINAL",id:"array_ordinal",level:2},{value:"ARRAY_ORDINAL_OF",id:"array_ordinal_of",level:2},{value:"ARRAY_OVERLAP",id:"array_overlap",level:2},{value:"SCALAR_IN_ARRAY",id:"scalar_in_array",level:2},{value:"ARRAY_PREPEND",id:"array_prepend",level:2},{value:"ARRAY_SLICE",id:"array_slice",level:2},{value:"ARRAY_TO_MV",id:"array_to_mv",level:2},{value:"ARRAY_TO_STRING",id:"array_to_string",level:2},{value:"ASIN",id:"asin",level:2},{value:"ATAN",id:"atan",level:2},{value:"ATAN2",id:"atan2",level:2},{value:"AVG",id:"avg",level:2},{value:"BIT_AND",id:"bit_and",level:2},{value:"BIT_OR",id:"bit_or",level:2},{value:"BIT_XOR",id:"bit_xor",level:2},{value:"BITWISE_AND",id:"bitwise_and",level:2},{value:"BITWISE_COMPLEMENT",id:"bitwise_complement",level:2},{value:"BITWISE_CONVERT_DOUBLE_TO_LONG_BITS",id:"bitwise_convert_double_to_long_bits",level:2},{value:"BITWISE_CONVERT_LONG_BITS_TO_DOUBLE",id:"bitwise_convert_long_bits_to_double",level:2},{value:"BITWISE_OR",id:"bitwise_or",level:2},{value:"BITWISE_SHIFT_LEFT",id:"bitwise_shift_left",level:2},{value:"BITWISE_SHIFT_RIGHT",id:"bitwise_shift_right",level:2},{value:"BITWISE_XOR",id:"bitwise_xor",level:2},{value:"BLOOM_FILTER",id:"bloom_filter",level:2},{value:"BLOOM_FILTER_TEST",id:"bloom_filter_test",level:2},{value:"BTRIM",id:"btrim",level:2},{value:"CASE",id:"case",level:2},{value:"Simple CASE",id:"simple-case",level:3},{value:"Searched CASE",id:"searched-case",level:3},{value:"CAST",id:"cast",level:2},{value:"CEIL",id:"ceil",level:2},{value:"Date and time",id:"date-and-time",level:3},{value:"Numeric",id:"numeric",level:3},{value:"CHAR_LENGTH",id:"char_length",level:2},{value:"CHARACTER_LENGTH",id:"character_length",level:2},{value:"COALESCE",id:"coalesce",level:2},{value:"CONCAT",id:"concat",level:2},{value:"CONTAINS_STRING",id:"contains_string",level:2},{value:"COS",id:"cos",level:2},{value:"COT",id:"cot",level:2},{value:"COUNT",id:"count",level:2},{value:"CUME_DIST",id:"cume_dist",level:2},{value:"CURRENT_DATE",id:"current_date",level:2},{value:"CURRENT_TIMESTAMP",id:"current_timestamp",level:2},{value:"DATE_TRUNC",id:"date_trunc",level:2},{value:"DECODE_BASE64_COMPLEX",id:"decode_base64_complex",level:2},{value:"DECODE_BASE64_UTF8",id:"decode_base64_utf8",level:2},{value:"DEGREES",id:"degrees",level:2},{value:"DENSE_RANK",id:"dense_rank",level:2},{value:"DIV",id:"div",level:2},{value:"DS_CDF",id:"ds_cdf",level:2},{value:"DS_GET_QUANTILE",id:"ds_get_quantile",level:2},{value:"DS_GET_QUANTILES",id:"ds_get_quantiles",level:2},{value:"DS_HISTOGRAM",id:"ds_histogram",level:2},{value:"DS_HLL",id:"ds_hll",level:2},{value:"DS_QUANTILE_SUMMARY",id:"ds_quantile_summary",level:2},{value:"DS_QUANTILES_SKETCH",id:"ds_quantiles_sketch",level:2},{value:"DS_RANK",id:"ds_rank",level:2},{value:"DS_THETA",id:"ds_theta",level:2},{value:"DS_TUPLE_DOUBLES",id:"ds_tuple_doubles",level:2},{value:"DS_TUPLE_DOUBLES_INTERSECT",id:"ds_tuple_doubles_intersect",level:2},{value:"DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE",id:"ds_tuple_doubles_metrics_sum_estimate",level:2},{value:"DS_TUPLE_DOUBLES_NOT",id:"ds_tuple_doubles_not",level:2},{value:"DS_TUPLE_DOUBLES_UNION",id:"ds_tuple_doubles_union",level:2},{value:"EARLIEST",id:"earliest",level:2},{value:"EARLIEST_BY",id:"earliest_by",level:2},{value:"EXP",id:"exp",level:2},{value:"EXTRACT",id:"extract",level:2},{value:"FIRST_VALUE",id:"first_value",level:2},{value:"FLOOR",id:"floor",level:2},{value:"Date and time",id:"date-and-time-1",level:3},{value:"Numeric",id:"numeric-1",level:3},{value:"GREATEST",id:"greatest",level:2},{value:"GROUPING",id:"grouping",level:2},{value:"HLL_SKETCH_ESTIMATE",id:"hll_sketch_estimate",level:2},{value:"HLL_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS",id:"hll_sketch_estimate_with_error_bounds",level:2},{value:"HLL_SKETCH_TO_STRING",id:"hll_sketch_to_string",level:2},{value:"HLL_SKETCH_UNION",id:"hll_sketch_union",level:2},{value:"HUMAN_READABLE_BINARY_BYTE_FORMAT",id:"human_readable_binary_byte_format",level:2},{value:"HUMAN_READABLE_DECIMAL_BYTE_FORMAT",id:"human_readable_decimal_byte_format",level:2},{value:"HUMAN_READABLE_DECIMAL_FORMAT",id:"human_readable_decimal_format",level:2},{value:"ICONTAINS_STRING",id:"icontains_string",level:2},{value:"IPV4_MATCH",id:"ipv4_match",level:2},{value:"IPV4_PARSE",id:"ipv4_parse",level:2},{value:"IPV4_STRINGIFY",id:"ipv4_stringify",level:2},{value:"IPV6_MATCH",id:"ipv6_match",level:2},{value:"JSON_KEYS",id:"json_keys",level:2},{value:"JSON_MERGE",id:"json_merge",level:2},{value:"JSON_OBJECT",id:"json_object",level:2},{value:"JSON_PATHS",id:"json_paths",level:2},{value:"JSON_QUERY",id:"json_query",level:2},{value:"JSON_QUERY_ARRAY",id:"json_query_array",level:2},{value:"JSON_VALUE",id:"json_value",level:2},{value:"LAG",id:"lag",level:2},{value:"LAST_VALUE",id:"last_value",level:2},{value:"LATEST",id:"latest",level:2},{value:"LATEST_BY",id:"latest_by",level:2},{value:"LEAD",id:"lead",level:2},{value:"LEAST",id:"least",level:2},{value:"LEFT",id:"left",level:2},{value:"LENGTH",id:"length",level:2},{value:"LISTAGG",id:"listagg",level:2},{value:"LN",id:"ln",level:2},{value:"LOG10",id:"log10",level:2},{value:"LOOKUP",id:"lookup",level:2},{value:"LOWER",id:"lower",level:2},{value:"LPAD",id:"lpad",level:2},{value:"LTRIM",id:"ltrim",level:2},{value:"MAX",id:"max",level:2},{value:"MILLIS_TO_TIMESTAMP",id:"millis_to_timestamp",level:2},{value:"MIN",id:"min",level:2},{value:"MOD",id:"mod",level:2},{value:"MV_APPEND",id:"mv_append",level:2},{value:"MV_CONCAT",id:"mv_concat",level:2},{value:"MV_CONTAINS",id:"mv_contains",level:2},{value:"MV_FILTER_NONE",id:"mv_filter_none",level:2},{value:"MV_FILTER_ONLY",id:"mv_filter_only",level:2},{value:"MV_LENGTH",id:"mv_length",level:2},{value:"MV_OFFSET",id:"mv_offset",level:2},{value:"MV_OFFSET_OF",id:"mv_offset_of",level:2},{value:"MV_ORDINAL",id:"mv_ordinal",level:2},{value:"MV_ORDINAL_OF",id:"mv_ordinal_of",level:2},{value:"MV_OVERLAP",id:"mv_overlap",level:2},{value:"MV_PREPEND",id:"mv_prepend",level:2},{value:"MV_SLICE",id:"mv_slice",level:2},{value:"MV_TO_ARRAY",id:"mv_to_array",level:2},{value:"MV_TO_STRING",id:"mv_to_string",level:2},{value:"NTILE",id:"ntile",level:2},{value:"NULLIF",id:"nullif",level:2},{value:"NVL",id:"nvl",level:2},{value:"PARSE_JSON",id:"parse_json",level:2},{value:"PARSE_LONG",id:"parse_long",level:2},{value:"PERCENT_RANK",id:"percent_rank",level:2},{value:"POSITION",id:"position",level:2},{value:"POWER",id:"power",level:2},{value:"RADIANS",id:"radians",level:2},{value:"RANK",id:"rank",level:2},{value:"REGEXP_EXTRACT",id:"regexp_extract",level:2},{value:"REGEXP_LIKE",id:"regexp_like",level:2},{value:"REGEXP_REPLACE",id:"regexp_replace",level:2},{value:"REPEAT",id:"repeat",level:2},{value:"REPLACE",id:"replace",level:2},{value:"REVERSE",id:"reverse",level:2},{value:"RIGHT",id:"right",level:2},{value:"ROUND",id:"round",level:2},{value:"ROW_NUMBER",id:"row_number",level:2},{value:"RPAD",id:"rpad",level:2},{value:"RTRIM",id:"rtrim",level:2},{value:"SAFE_DIVIDE",id:"safe_divide",level:2},{value:"SIN",id:"sin",level:2},{value:"SQRT",id:"sqrt",level:2},{value:"STDDEV",id:"stddev",level:2},{value:"STDDEV_POP",id:"stddev_pop",level:2},{value:"STDDEV_SAMP",id:"stddev_samp",level:2},{value:"STRING_AGG",id:"string_agg",level:2},{value:"STRING_FORMAT",id:"string_format",level:2},{value:"STRING_TO_ARRAY",id:"string_to_array",level:2},{value:"STRING_TO_MV",id:"string_to_mv",level:2},{value:"STRLEN",id:"strlen",level:2},{value:"STRPOS",id:"strpos",level:2},{value:"SUBSTR",id:"substr",level:2},{value:"SUBSTRING",id:"substring",level:2},{value:"SUM",id:"sum",level:2},{value:"TAN",id:"tan",level:2},{value:"TEXTCAT",id:"textcat",level:2},{value:"THETA_SKETCH_ESTIMATE",id:"theta_sketch_estimate",level:2},{value:"THETA_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS",id:"theta_sketch_estimate_with_error_bounds",level:2},{value:"THETA_SKETCH_INTERSECT",id:"theta_sketch_intersect",level:2},{value:"THETA_SKETCH_NOT",id:"theta_sketch_not",level:2},{value:"THETA_SKETCH_UNION",id:"theta_sketch_union",level:2},{value:"TIME_CEIL",id:"time_ceil",level:2},{value:"TIME_EXTRACT",id:"time_extract",level:2},{value:"TIME_FLOOR",id:"time_floor",level:2},{value:"TIME_FORMAT",id:"time_format",level:2},{value:"TIME_IN_INTERVAL",id:"time_in_interval",level:2},{value:"TIME_PARSE",id:"time_parse",level:2},{value:"TIME_SHIFT",id:"time_shift",level:2},{value:"TIMESTAMP_TO_MILLIS",id:"timestamp_to_millis",level:2},{value:"TIMESTAMPADD",id:"timestampadd",level:2},{value:"TIMESTAMPDIFF",id:"timestampdiff",level:2},{value:"TO_JSON_STRING",id:"to_json_string",level:2},{value:"TRIM",id:"trim",level:2},{value:"TRUNC",id:"trunc",level:2},{value:"TRUNCATE",id:"truncate",level:2},{value:"TRY_PARSE_JSON",id:"try_parse_json",level:2},{value:"UPPER",id:"upper",level:2},{value:"VAR_POP",id:"var_pop",level:2},{value:"VAR_SAMP",id:"var_samp",level:2},{value:"VARIANCE",id:"variance",level:2}],u={toc:d},N="wrapper";function s(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)(N,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"}," Apache Druid supports two query languages: Druid SQL and ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/"},"native queries"),".\nThis document describes the SQL language.")),(0,r.kt)("p",null,"This page provides a reference of Apache Druid","\xae"," SQL functions in alphabetical order. For more details on a function, refer to the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-aggregations"},"Aggregation functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-array-functions"},"Array functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-json-functions"},"JSON functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Multi-value string functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-scalar"},"Scalar functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/sql-window-functions"},"Window functions"))),(0,r.kt)("h2",{id:"example-data"},"Example data"),(0,r.kt)("p",null,"The examples on this page use the following example datasources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array-example")," created with ",(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/multi-stage-query/"},"SQL-based ingestion")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flight-carriers")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"FlightCarrierOnTime (1 month)")," included with Druid"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kttm")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"KoalasToTheMax one day")," included with Druid"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mvd-example")," using ",(0,r.kt)("a",{parentName:"li",href:"/docs/32.0.0/querying/multi-value-dimensions#sql-based-ingestion"},"SQL-based ingestion")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"taxi-trips")," using ",(0,r.kt)("inlineCode",{parentName:"li"},"NYC Taxi cabs (3 files)")," included with Druid")),(0,r.kt)("p",null,"To load a datasource included with Druid,\naccess the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/operations/web-console"},"web console"),"\nand go to ",(0,r.kt)("strong",{parentName:"p"},"Load data > Batch - SQL > Example data"),".\nSelect ",(0,r.kt)("strong",{parentName:"p"},"Connect data"),", and parse using the default settings.\nOn the page to configure the schema, select the datasource label\nand enter the name of the datasource listed above."),(0,r.kt)("p",null,"Use the following query to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Datasource for arrays"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'REPLACE INTO "array-example" OVERWRITE ALL\nWITH "ext" AS (\n  SELECT *\n  FROM TABLE(\n    EXTERN(\n      \'{"type":"inline","data":"{\\"timestamp\\": \\"2023-01-01T00:00:00\\", \\"label\\": \\"row1\\", \\"arrayString\\": [\\"a\\", \\"b\\"],  \\"arrayLong\\":[1, null,3], \\"arrayDouble\\":[1.1, 2.2, null]}\\n{\\"timestamp\\": \\"2023-01-01T00:00:00\\", \\"label\\": \\"row2\\", \\"arrayString\\": [null, \\"b\\"], \\"arrayLong\\":null,        \\"arrayDouble\\":[999, null, 5.5]}\\n{\\"timestamp\\": \\"2023-01-01T00:00:00\\", \\"label\\": \\"row3\\", \\"arrayString\\": [],          \\"arrayLong\\":[1, 2, 3],   \\"arrayDouble\\":[null, 2.2, 1.1]} \\n{\\"timestamp\\": \\"2023-01-01T00:00:00\\", \\"label\\": \\"row4\\", \\"arrayString\\": [\\"a\\", \\"b\\"],  \\"arrayLong\\":[1, 2, 3],   \\"arrayDouble\\":[]}\\n{\\"timestamp\\": \\"2023-01-01T00:00:00\\", \\"label\\": \\"row5\\", \\"arrayString\\": null,        \\"arrayLong\\":[],          \\"arrayDouble\\":null}"}\',\n      \'{"type":"json"}\'\n    )\n  ) EXTEND (\n    "timestamp" VARCHAR,\n    "label" VARCHAR,\n    "arrayString" VARCHAR ARRAY,\n    "arrayLong" BIGINT ARRAY,\n    "arrayDouble" DOUBLE ARRAY\n  )\n)\nSELECT\n    TIME_PARSE("timestamp") AS "__time",\n    "label",\n    "arrayString",\n    "arrayLong",\n    "arrayDouble"\nFROM "ext"\nPARTITIONED BY DAY\n'))),(0,r.kt)("p",null,"Use the following query to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," datasource:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Datasource for multi-value string dimensions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'REPLACE INTO "mvd-example" OVERWRITE ALL\nWITH "ext" AS (\n  SELECT *\n  FROM TABLE(\n    EXTERN(\n      \'{"type":"inline","data":"{\\"timestamp\\": \\"2011-01-12T00:00:00.000Z\\", \\"label\\": \\"row1\\", \\"tags\\": [\\"t1\\",\\"t2\\",\\"t3\\"]}\\n{\\"timestamp\\": \\"2011-01-13T00:00:00.000Z\\", \\"label\\": \\"row2\\", \\"tags\\": [\\"t3\\",\\"t4\\",\\"t5\\"]}\\n{\\"timestamp\\": \\"2011-01-14T00:00:00.000Z\\", \\"label\\": \\"row3\\", \\"tags\\": [\\"t5\\",\\"t6\\",\\"t7\\"]}\\n{\\"timestamp\\": \\"2011-01-14T00:00:00.000Z\\", \\"label\\": \\"row4\\", \\"tags\\": []}"}\',\n      \'{"type":"json"}\',\n      \'[{"name":"timestamp", "type":"STRING"},{"name":"label", "type":"STRING"},{"name":"tags", "type":"ARRAY<STRING>"}]\'\n    )\n  )\n)\nSELECT\n  TIME_PARSE("timestamp") AS "__time",\n  "label",\n  ARRAY_TO_MV("tags") AS "tags"\nFROM "ext"\nPARTITIONED BY DAY\n'))),(0,r.kt)("h2",{id:"abs"},"ABS"),(0,r.kt)("p",null,"Calculates the absolute value of a numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ABS(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example applies the ABS function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrDelay")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "ArrDelay" AS "arrival_delay",\n  ABS("ArrDelay") AS "absolute_arrival_delay"\nFROM "flight-carriers"\nWHERE "ArrDelay" < 0\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_delay")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"absolute_arrival_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-27")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"27")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"acos"},"ACOS"),(0,r.kt)("p",null,"Calculates the arc cosine (arccosine) of a numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ACOS(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the arc cosine of ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ACOS(0) AS "arc_cosine"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arc_cosine")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.5707963267948966")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"any_value"},"ANY_VALUE"),(0,r.kt)("p",null,"Returns any value of the specified expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ANY_VALUE(expr, [maxBytesPerValue, [aggregateMultipleValues]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the state abbreviation, state name, and average flight time grouped by each state in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginState",\n  ANY_VALUE("OriginStateName") AS "OriginStateName",\n  AVG("ActualElapsedTime") AS "AverageFlightTime"\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"OriginState")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"OriginStateName")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"AverageFlightTime")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alaska")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"113.2777967841259"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AL")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alabama")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"92.28766697732215"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Arkansas")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"95.0391382405745")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_count_distinct"},"APPROX_COUNT_DISTINCT"),(0,r.kt)("p",null,"Counts distinct values of a regular column or a prebuilt sketch column using an approximate algorithm."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_COUNT_DISTINCT(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example counts the number of distinct airlines reported in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_COUNT_DISTINCT("Reporting_Airline") AS "num_airlines"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_airlines")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_count_distinct_builtin"},"APPROX_COUNT_DISTINCT_BUILTIN"),(0,r.kt)("p",null,"Counts distinct values of a string, numeric, or ",(0,r.kt)("inlineCode",{parentName:"p"},"hyperUnique")," column using Druid's built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"cardinality")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"hyperUnique")," aggregators.\nConsider using ",(0,r.kt)("inlineCode",{parentName:"p"},"APPROX_COUNT_DISTINCT_DS_HLL")," instead, which offers better accuracy in many cases."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_COUNT_DISTINCT_BUILTIN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example counts the number of distinct airlines reported in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_COUNT_DISTINCT_BUILTIN("Reporting_Airline") AS "num_airlines"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_airlines")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_count_distinct_ds_hll"},"APPROX_COUNT_DISTINCT_DS_HLL"),(0,r.kt)("p",null,"Returns the approximate number of distinct values in a HLL sketch column or a regular column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-hll"},"DataSketches HLL Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_COUNT_DISTINCT_DS_HLL(expr, [lgK, tgtHllType])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the approximate number of distinct tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_COUNT_DISTINCT_DS_HLL("Tail_Number") AS "estimate"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4686")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_count_distinct_ds_theta"},"APPROX_COUNT_DISTINCT_DS_THETA"),(0,r.kt)("p",null,"Returns the approximate number of distinct values in a Theta sketch column or a regular column. See ",(0,r.kt)("a",{parentName:"p",href:"../development/extensions-core/datasketches-theta#aggregator"},"DataSketches Theta Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_COUNT_DISTINCT_DS_THETA(expr, [size])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the approximate number of distinct tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_COUNT_DISTINCT_DS_THETA("Tail_Number") AS "estimate"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4667")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_quantile"},"APPROX_QUANTILE"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Deprecated in favor of ",(0,r.kt)("a",{parentName:"p",href:"#approx_quantile_ds"},(0,r.kt)("inlineCode",{parentName:"a"},"APPROX_QUANTILE_DS")),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_QUANTILE(expr, probability, [k])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_quantile_ds"},"APPROX_QUANTILE_DS"),(0,r.kt)("p",null,"Computes approximate quantiles on a Quantiles sketch column or a regular numeric column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-quantiles"},"DataSketches Quantiles Sketch module")," for a description of parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_QUANTILE_DS(expr, probability, [k])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example approximates the median of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The query may return a different approximation on each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_QUANTILE_DS("Distance", 0.5, 128)  AS "estimate_median"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_median")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"569")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"approx_quantile_fixed_buckets"},"APPROX_QUANTILE_FIXED_BUCKETS"),(0,r.kt)("p",null,"Computes approximate quantiles on fixed buckets histogram column or a regular numeric column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/approximate-histograms#fixed-buckets-histogram"},"Fixed buckets histogram")," for a description of parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"APPROX_QUANTILE_FIXED_BUCKETS(expr, probability, numBuckets, lowerLimit, upperLimit, [outlierHandlingMode])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example approximates the median of a histogram on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The histogram has 10 buckets, a lower limit of zero, an upper limit of 2500, and ignores outlier values. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT APPROX_QUANTILE_FIXED_BUCKETS("Distance", 0.5, 10, 0, 2500, \'ignore\')  AS "estimate_median"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_median")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"571.6983032226562")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"array"},"ARRAY"),(0,r.kt)("p",null,"Constructs a SQL ",(0,r.kt)("inlineCode",{parentName:"p"},"ARRAY")," literal from the provided expression arguments. All arguments must be of the same type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY[expr1, expr2, ...]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example constructs arrays from the values of the ",(0,r.kt)("inlineCode",{parentName:"p"},"agent_category"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"browser"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"browser_version")," columns in the ",(0,r.kt)("inlineCode",{parentName:"p"},"kttm")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY["agent_category", "browser", "browser_version"] AS "user_agent_details"\nFROM "kttm"\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"user_agent_details")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["Personal computer","Chrome","76.0.3809.100"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["Smartphone","Chrome Mobile","50.0.2661.89"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["Personal computer","Chrome","76.0.3809.100"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["Personal computer","Opera","62.0.3331.116"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["Smartphone","Mobile Safari","12.0"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_agg"},"ARRAY_AGG"),(0,r.kt)("p",null,"Returns an array of all values of the specified expression. To include only unique values, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"DISTINCT"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_AGG([DISTINCT] expr, [size])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns arrays of unique values from the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," column in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource, grouped by ",(0,r.kt)("inlineCode",{parentName:"p"},"Reporting_Airline"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "Reporting_Airline", ARRAY_AGG(DISTINCT "OriginState", 50000) AS "Origin"\nFROM "flight-carriers"\nGROUP BY "Reporting_Airline"\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Origin")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["AL","AR","AZ","CA","CO","CT","FL","GA","HI","IL","IN","KS","KY","LA","MA","MD","MI","MN","MO","NC","NE","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","TN","TX","UT","VA","VI","WA"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["AK","AZ","CA","CO","FL","ID","IL","MA","NJ","NV","OR","TX","VA","WA"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"B6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["AZ","CA","CO","FL","LA","MA","NJ","NV","NY","OR","PR","UT","VA","VT","WA"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CO")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["AK","AL","AZ","CA","CO","CT","FL","GA","HI","IL","IN","LA","MA","MD","MI","MN","MO","MS","NC","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","SC","TN","TX","UT","VA","VI","WA"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["AL","CA","CT","FL","GA","IL","MA","ME","MI","NC","NH","NJ","NV","NY","OH","PA","RI","SC","TN","VA","VT","WA","WV"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"array_append"},"ARRAY_APPEND"),(0,r.kt)("p",null,"Appends the expression to the array. The source array type determines the resulting array type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_APPEND(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example appends ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," to the values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayString")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_APPEND("arrayString",\'c\') AS "array_appended"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array_appended")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[a, b, c]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'[null,"b","c"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[c]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[a, b, c]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_concat"},"ARRAY_CONCAT"),(0,r.kt)("p",null,"Concatenates two arrays. The type of ",(0,r.kt)("inlineCode",{parentName:"p"},"arr1")," determines the resulting array type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_CONCAT(arr1, arr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example concatenates the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," columns from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_CONCAT("arrayLong", "arrayDouble") AS "arrayConcatenated" \nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayConcatenated")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3,1.1,2.2,null]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3,null,2.2,1.1]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_concat_agg"},"ARRAY_CONCAT_AGG"),(0,r.kt)("p",null,"Concatenates array inputs into a single array. To include only unique values, specify ",(0,r.kt)("inlineCode",{parentName:"p"},"DISTINCT"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_CONCAT_AGG([DISTINCT] expr, [size])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example concatenates the array inputs from the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource into a single array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_CONCAT_AGG( DISTINCT "arrayDouble") AS "array_concat_agg_distinct"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array_concat_agg_distinct")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[null,1.1,2.2,5.5,999]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"array_contains"},"ARRAY_CONTAINS"),(0,r.kt)("p",null,"Checks if the array contains the specified expression."),(0,r.kt)("h3",{id:"scalar"},"Scalar"),(0,r.kt)("p",null,"If the specified expression is a scalar value, returns true if the source array contains the value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_CONTAINS(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the ",(0,r.kt)("inlineCode",{parentName:"p"},"arraySring")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource contains ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayLong", ARRAY_CONTAINS("arrayLong", 2) AS "arrayContains"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayLong")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayContains")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h3",{id:"array-1"},"Array"),(0,r.kt)("p",null,"If the specified expression is an array, returns true if the source array contains all elements of the expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_CONTAINS(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource contains all elements of the provided expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "label", "arrayLong", ARRAY_CONTAINS("arrayLong", ARRAY[1,2,3]) AS "arrayContains"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"label")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayLong")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayContains")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row3")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row5")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_length"},"ARRAY_LENGTH"),(0,r.kt)("p",null,"Returns the length of the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_LENGTH(arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the length of array expressions in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayDouble" AS "array", ARRAY_LENGTH("arrayDouble") AS "arrayLength"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"larray")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayLength")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row1")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row2")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row3")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row4")),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"row5")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_offset"},"ARRAY_OFFSET"),(0,r.kt)("p",null,"Returns the array element at the specified zero-based index. Returns null if the index is out of bounds."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_OFFSET(arr, long)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the element at the specified zero-based index from the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayLong" as "array", ARRAY_OFFSET("arrayLong", 2) AS "elementAtIndex"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"elementAtIndex")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_offset_of"},"ARRAY_OFFSET_OF"),(0,r.kt)("p",null,"Returns the zero-based index of the first occurrence of the expression in the array. Returns null if the value isn't present, or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"druid.generic.useDefaultValueForNull=true")," (deprecated legacy mode)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_OFFSET_OF(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the zero-based index of the fist occurrence of ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," in the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayLong" as "array", ARRAY_OFFSET_OF("arrayLong", 3) AS "offset"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"offset")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_ordinal"},"ARRAY_ORDINAL"),(0,r.kt)("p",null,"Returns the array element at the specified one-based index. Returns null if the index is out of bounds."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_ORDINAL(arr, long)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the element at the specified one-based index from the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayLong" as "array", ARRAY_ORDINAL("arrayLong", 2) AS "elementAtIndex"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"elementAtIndex")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_ordinal_of"},"ARRAY_ORDINAL_OF"),(0,r.kt)("p",null,"Returns the one-based index of the first occurrence of the expression in the array. Returns null if the value isn't present, or ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"druid.generic.useDefaultValueForNull=true")," (deprecated legacy mode)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_ORDINAL_OF(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the one-based index of the fist occurrence of ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," in the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayLong")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayLong" as "array", ARRAY_ORDINAL_OF("arrayLong", 3) AS "ordinal"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"array")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ordinal")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,null,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,3]")),(0,r.kt)("td",{parentName:"tr",align:null},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_overlap"},"ARRAY_OVERLAP"),(0,r.kt)("p",null,"Returns true if two arrays have any elements in common. Treats ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," values as known elements."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_OVERLAP(arr1, arr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if columns ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayString")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource have common elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayString", "arrayDouble",  ARRAY_OVERLAP("arrayString", "arrayDouble") AS "overlap"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayString")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayDouble")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"overlap")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["a","b"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1.1,2.2,null]")),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'[null,"b"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[999,null,5.5]")),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[null,2.2,1.1]")),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["a","b"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"scalar_in_array"},"SCALAR_IN_ARRAY"),(0,r.kt)("p",null,"Checks if the scalar value is present in the array. Returns false if the value is non-null, or ",(0,r.kt)("inlineCode",{parentName:"p"},"UNKNOWN")," if the value is ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"UNKNOWN")," if the array is ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"SCALAR_IN_ARRAY(expr, arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the value ",(0,r.kt)("inlineCode",{parentName:"p"},"36")," is present in the array generated from the elements in the ",(0,r.kt)("inlineCode",{parentName:"p"},"DestStateFips")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "Reporting_Airline", ARRAY_AGG(DISTINCT "DestStateFips") AS "StateFipsArray", SCALAR_IN_ARRAY(36, ARRAY_AGG(DISTINCT "DestStateFips")) AS "ValueInArray"\nFROM "flight-carriers"\nGROUP BY "Reporting_Airline"\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"StateFipsArray")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ValueInArray")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,4,5,6,8,9,12,13,15,17,18,20,21,22,24,25,26,27,29,31,32,34,35,36,37,39,40,41,42,44,47,48,49,51,53,72,78]")),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[2,4,6,8,12,16,17,25,32,34,41,48,51,53]")),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"B6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[4,6,8,12,22,25,32,34,36,41,49,50,51,53,72]")),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CO")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,2,4,6,8,9,12,13,15,17,18,22,24,25,26,27,28,29,31,32,33,34,35,36,37,39,40,41,42,44,45,47,48,49,51,53,72,78]")),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1,6,9,12,13,17,23,25,26,32,33,34,36,37,39,42,44,45,47,50,51,53,54]")),(0,r.kt)("td",{parentName:"tr",align:null},"true"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_prepend"},"ARRAY_PREPEND"),(0,r.kt)("p",null,"Prepends the expression to the array. The source array type determines the resulting array type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_PREPEND(expr, arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example prepends ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," to the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayString")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_PREPEND(\'c\', "arrayString") AS "arrayPrepended"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayPrepended")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[c, a, b]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["c",null,"b"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[c]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[c,a,b]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_slice"},"ARRAY_SLICE"),(0,r.kt)("p",null,"Returns a subset of the array from the zero-based index ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," (inclusive) to ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," (exclusive). Returns null if ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," is less than 0, greater than the length of the array, or greater than ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_SLICE(arr, start, end)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example constructs a new array from the elements of arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "arrayDouble", ARRAY_SLICE("arrayDouble", 0, 2) AS "arrayNew"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayDouble")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrayNew")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1.1,2.2,null]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[1.1,2.2]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[999,null,5.5]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[999,null]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[null,2.2,1.1]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[null,2.2]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[null,null]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_to_mv"},"ARRAY_TO_MV"),(0,r.kt)("p",null,"Converts an array of any type into a ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-data-types#multi-value-strings"},"multi-value string"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_TO_MV(arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource into multi-value strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_TO_MV("arrayDouble") AS "multiValueString"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"multiValueString")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["1.1","2.2",null]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["999.0",null,"5.5"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'[null,"2.2","1.1"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"array_to_string"},"ARRAY_TO_STRING"),(0,r.kt)("p",null,"Joins all elements of the array into a string using the specified delimiter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ARRAY_TO_STRING(arr, delimiter)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the arrays in the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrayDouble")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"array-example")," datasource into concatenated strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ARRAY_TO_STRING("arrayDouble", \'\') AS "notSeparated"\nFROM "array-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"multiValueString")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.12.2null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"999.0null5.5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null2.21.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"}," "))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"asin"},"ASIN"),(0,r.kt)("p",null,"Calculates the arc sine (arcsine) of a numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ASIN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the arc sine of ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ASIN(1) AS "arc_sine"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arc_sine")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.5707963267948966")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"atan"},"ATAN"),(0,r.kt)("p",null,"Calculates the arc tangent (arctangent) of a numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ATAN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the arc tangent of ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ATAN(1) AS "arc_tangent"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arc_tangent")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.7853981633974483")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"atan2"},"ATAN2"),(0,r.kt)("p",null,"Calculates the arc tangent (arctangent) of a specified x and y coordinate."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ATAN2(x, y)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the arc tangent of the coordinate ",(0,r.kt)("inlineCode",{parentName:"p"},"(1, -1)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ATAN2(1,-1) AS "arc_tangent_2"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arc_tangent_2")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2.356194490192345")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"avg"},"AVG"),(0,r.kt)("p",null,"Calculates the average of a set of values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"AVG(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the average minutes of delay for a particular airlines in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT AVG("DepDelayMinutes") AS avg_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"avg_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"8.936")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"bit_and"},"BIT_AND"),(0,r.kt)("p",null,"Performs a bitwise AND operation on all input values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"BIT_AND(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the bitwise AND operation for all values in ",(0,r.kt)("inlineCode",{parentName:"p"},"passenger-count")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  BIT_AND("passenger_count") AS "bit_and"\nFROM "taxi-trips"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bit_and")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"bit_or"},"BIT_OR"),(0,r.kt)("p",null,"Performs a bitwise OR operation on all input values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"BIT_OR(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the bitwise OR operation for all values in ",(0,r.kt)("inlineCode",{parentName:"p"},"passenger-count")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  BIT_OR("passenger_count") AS "bit_or"\nFROM "taxi-trips"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bit_or")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"bit_xor"},"BIT_XOR"),(0,r.kt)("p",null,"Performs a bitwise XOR operation on all input values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"BIT_XOR(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the bitwise XOR operation for all values in ",(0,r.kt)("inlineCode",{parentName:"p"},"passenger-count")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  BIT_OR("passenger_count") AS "bit_xor"\nFROM "taxi-trips"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bit_xor")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"6")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_and"},"BITWISE_AND"),(0,r.kt)("p",null,"Returns the bitwise AND between two expressions: ",(0,r.kt)("inlineCode",{parentName:"p"},"expr1 & expr2"),". "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_AND(expr1, expr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise AND operation ",(0,r.kt)("inlineCode",{parentName:"p"},"12 & 10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_AND(12, 10) AS "bitwise_and"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_and")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_complement"},"BITWISE_COMPLEMENT"),(0,r.kt)("p",null,"Returns the bitwise complement (bitwise not) for the expression: ",(0,r.kt)("inlineCode",{parentName:"p"},"~expr"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_COMPLEMENT(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise complement operation ",(0,r.kt)("inlineCode",{parentName:"p"},"~12"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_COMPLEMENT(12) AS "bitwise_complement"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_complement")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-13"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_convert_double_to_long_bits"},"BITWISE_CONVERT_DOUBLE_TO_LONG_BITS"),(0,r.kt)("p",null,"Converts the bits of an IEEE 754 floating-point double value to long."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:"),(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_CONVERT_DOUBLE_TO_LONG_BITS(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the IEEE 754 floating-point double representation of ",(0,r.kt)("inlineCode",{parentName:"p"},"255")," as a long. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_CONVERT_DOUBLE_TO_LONG_BITS(255) AS "ieee_754_double_to_long"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ieee_754_double_to_long")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4643176031446892544")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_convert_long_bits_to_double"},"BITWISE_CONVERT_LONG_BITS_TO_DOUBLE"),(0,r.kt)("p",null,"Converts a long to the IEEE 754 floating-point double specified by the bits stored in the long."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:"),(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_CONVERT_LONG_BITS_TO_DOUBLE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the long representation of ",(0,r.kt)("inlineCode",{parentName:"p"},"4643176031446892544")," as an IEEE 754 floating-point double."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_CONVERT_LONG_BITS_TO_DOUBLE(4643176031446892544) AS "long_to_ieee_754_double"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"long_to_ieee_754_double")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"255")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_or"},"BITWISE_OR"),(0,r.kt)("p",null,"Returns the bitwise OR between the two expressions: ",(0,r.kt)("inlineCode",{parentName:"p"},"expr1 | expr2"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_OR(expr1, expr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise OR operation ",(0,r.kt)("inlineCode",{parentName:"p"},"12 | 10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_OR(12, 10) AS "bitwise_or"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_or")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"14")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_shift_left"},"BITWISE_SHIFT_LEFT"),(0,r.kt)("p",null,"Returns the bitwise left shift by x positions of an expr: ",(0,r.kt)("inlineCode",{parentName:"p"},"expr << x"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_SHIFT_LEFT(expr, x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise SHIFT operation ",(0,r.kt)("inlineCode",{parentName:"p"},"2 << 3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_SHIFT_LEFT(2, 3) AS "bitwise_shift_left"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_shift_left")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"16")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_shift_right"},"BITWISE_SHIFT_RIGHT"),(0,r.kt)("p",null,"Returns the bitwise right shift by x positions of an expr: ",(0,r.kt)("inlineCode",{parentName:"p"},"expr >> x"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_SHIFT_RIGHT(expr, x)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise SHIFT operation ",(0,r.kt)("inlineCode",{parentName:"p"},"16 >> 3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_SHIFT_RIGHT(16, 3) AS "bitwise_shift_right"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_shift_right")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bitwise_xor"},"BITWISE_XOR"),(0,r.kt)("p",null,"Returns the bitwise exclusive OR between the two expressions: ",(0,r.kt)("inlineCode",{parentName:"p"},"expr1 ^ expr2"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BITWISE_XOR(expr1, expr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example performs the bitwise XOR operation ",(0,r.kt)("inlineCode",{parentName:"p"},"12 ^ 10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT BITWISE_XOR(12, 10) AS "bitwise_xor"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bitwise_xor")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"6")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"bloom_filter"},"BLOOM_FILTER"),(0,r.kt)("p",null,"Computes a ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/bloom-filter"},"Bloom filter")," from values provided in an expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BLOOM_FILTER(expr, numEntries)"),(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("inlineCode",{parentName:"li"},"numEntries")," specifies the maximum number of distinct values before the false positive rate increases."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns a Base64-encoded Bloom filter representing the set of devices ,",(0,r.kt)("inlineCode",{parentName:"p"},"agent_category"),", used in Albania:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "country",\n  BLOOM_FILTER(agent_category, 10) as albanian_bloom\nFROM "kttm"\nWHERE "country" = \'Albania\'\nGROUP BY "country"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"country")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"albanian_bloom")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Albania")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BAAAAAgAAACAAEAAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAIIAAAAAAAAAAAAAAAAAAIAAAAAAQAAAAAAAAAAAAAA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"bloom_filter_test"},"BLOOM_FILTER_TEST"),(0,r.kt)("p",null,"Returns true if an expression is contained in a Base64-encoded ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/bloom-filter"},"Bloom filter")," string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BLOOM_FILTER_TEST(expr, <STRING>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," when a device type, ",(0,r.kt)("inlineCode",{parentName:"p"},"agent_category"),", exists in the Bloom filter representing the set of devices used in Albania:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT agent_category,\nBLOOM_FILTER_TEST("agent_category", \'BAAAAAgAAACAAEAAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAIIAAAAAAAAAAAAAAAAAAIAAAAAAQAAAAAAAAAAAAAA\') AS bloom_test\nFROM "kttm"\nGROUP BY 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"agent_category")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bloom_test")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"empty")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Game console")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Personal computer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Smart TV")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Smartphone")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Tablet")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"btrim"},"BTRIM"),(0,r.kt)("p",null,"Trims characters from both the leading and trailing ends of an expression. Defaults ",(0,r.kt)("inlineCode",{parentName:"p"},"chars")," to a space if none is provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"BTRIM(expr[, chars])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example trims the ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," characters from both ends of the string expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '___abc___' AS \"original_string\",\n  BTRIM('___abc___', '_') AS \"trim_both_ends\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"trim_both_ends")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"___abc___")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"case"},"CASE"),(0,r.kt)("p",null,"Returns a result based on given conditions."),(0,r.kt)("h3",{id:"simple-case"},"Simple CASE"),(0,r.kt)("p",null,"Compares an expression to a set of values or expressions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CASE expr WHEN value1 THEN result1 \\[ WHEN value2 THEN result2 ... \\] \\[ ELSE resultN \\] END")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns a UI type based on the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"agent_category")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"kttm")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \"agent_category\" AS \"device_type\",\nCASE \"agent_category\"\n    WHEN 'Personal computer' THEN 'Large UI'\n    WHEN 'Smartphone' THEN 'Mobile UI'\n    ELSE 'other'\nEND AS \"UI_type\"\nFROM \"kttm\"\nLIMIT 2\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"device_type")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"UI_type")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Personal computer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Large UI"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Smartphone")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Mobile UI")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Lean more")),(0,r.kt)("h3",{id:"searched-case"},"Searched CASE"),(0,r.kt)("p",null,"Evaluates a set of Boolean expressions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CASE WHEN boolean_expr1 THEN result1 \\[ WHEN boolean_expr2 THEN result2 ... \\] \\[ ELSE resultN \\] END")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the departure location corresponding to the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginStateName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "OriginStateName" AS "flight_origin",\nCASE\n    WHEN "OriginStateName" = \'Puerto Rico\' THEN \'U.S. Territory\'\n    WHEN "OriginStateName" = \'U.S. Virgin Islands\' THEN \'U.S. Territory\'\n    ELSE \'U.S. State\'\nEND AS "state_status"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_origin")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"departure_location")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Puerto Rico")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U.S. Territory"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Massachusetts")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U.S. State")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Lean more")),(0,r.kt)("h2",{id:"cast"},"CAST"),(0,r.kt)("p",null,"Converts a value into the specified data type."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CAST(value AS TYPE)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource from ",(0,r.kt)("inlineCode",{parentName:"p"},"DOUBLE")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "Distance" AS "original_column",\n      CAST("Distance" AS VARCHAR) "cast_to_string" \nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_column")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"cast_to_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1571")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1571.0")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"ceil"},"CEIL"),(0,r.kt)("h3",{id:"date-and-time"},"Date and time"),(0,r.kt)("p",null,"Rounds up a timestamp by a given time unit."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CEIL(timestamp_expr TO unit>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example rounds up the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource to the nearest year."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "__time" AS "original_time",\n  CEIL("__time" TO YEAR) AS "ceiling"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ceiling")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2014-01-01T00:00:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h3",{id:"numeric"},"Numeric"),(0,r.kt)("p",null,"Calculates the smallest integer value greater than or equal to the numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CEIL(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example applies the CEIL function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fare_amount")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "fare_amount" AS "fare_amount",\n  CEIL("fare_amount") AS "ceiling_fare_amount"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"fare_amount")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ceiling_fare_amount")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"21.25")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"22")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"char_length"},"CHAR_LENGTH"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#length"},(0,r.kt)("inlineCode",{parentName:"a"},"LENGTH")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CHAR_LENGTH(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"character_length"},"CHARACTER_LENGTH"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#length"},(0,r.kt)("inlineCode",{parentName:"a"},"LENGTH")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CHARACTER_LENGTH(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"coalesce"},"COALESCE"),(0,r.kt)("p",null,"Returns the first non-null value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"COALESCE(expr, expr, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the first non-null value from the list of parameters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COALESCE(null, null, 5, 'abc') AS \"first_non_null\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"first_non_null")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"concat"},"CONCAT"),(0,r.kt)("p",null,"Concatenates a list of expressions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CONCAT(expr[, expr,...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example concatenates the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),", the string ",(0,r.kt)("inlineCode",{parentName:"p"},"to"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"DestCityName")," column from ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginCityName" AS "origin_city",\n  "DestCityName" AS "destination_city",\n  CONCAT("OriginCityName", \' to \', "DestCityName") AS "concatenate_flight_details"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"destination_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"concatenate_flight_details")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Washington, DC")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR to Washington, DC")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"contains_string"},"CONTAINS_STRING"),(0,r.kt)("p",null,"Returns true if ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," is a substring of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),", case-sensitive. Otherwise, returns false."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CONTAINS_STRING(expr, str)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource contains the substring ",(0,r.kt)("inlineCode",{parentName:"p"},"San"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginCityName" AS "origin_city",\n  CONTAINS_STRING("OriginCityName", \'San\') AS "contains_string"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"contains_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boston, MA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"cos"},"COS"),(0,r.kt)("p",null,"Calculates the trigonometric cosine of an angle expressed in radians."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"COS(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the cosine of angle ",(0,r.kt)("inlineCode",{parentName:"p"},"PI/3")," radians."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT COS(PI / 3) AS "cosine"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"cosine")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.5000000000000001")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"cot"},"COT"),(0,r.kt)("p",null,"Calculates the trigonometric cotangent of an angle expressed in radians."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"COT(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the cotangent of angle ",(0,r.kt)("inlineCode",{parentName:"p"},"PI/3")," radians."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT COT(PI / 3) AS "cotangent"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"cotangent")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.577350269189626")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"count"},"COUNT"),(0,r.kt)("p",null,"Counts the number of rows."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"COUNT([DISTINCT] expr)")," ",(0,r.kt)("inlineCode",{parentName:"li"},"COUNT(*)"),(0,r.kt)("br",{parentName:"li"}),"COUNT DISTINCT is an alias for ",(0,r.kt)("a",{parentName:"li",href:"#approx_count_distinct"},(0,r.kt)("inlineCode",{parentName:"a"},"APPROX_COUNT_DISTINCT")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example counts the number of distinct flights per day after ",(0,r.kt)("inlineCode",{parentName:"p"},"'2005-01-01 00:00:00'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TIME_FLOOR(__time, \'P1D\') AS "flight_day",\n  COUNT(*) AS "num_flights"\nFROM "flight-carriers"\nWHERE __time > \'2005-01-01 00:00:00\'\nGROUP BY 1\nLIMIT 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"18961"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-02T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"19434"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-03T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"19745")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"cume_dist"},"CUME_DIST"),(0,r.kt)("p",null,"Returns the cumulative distribution of the current row within the window calculated as ",(0,r.kt)("inlineCode",{parentName:"p"},"number of window rows at the same rank or higher than current row")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"total window rows"),". The return value ranges between ",(0,r.kt)("inlineCode",{parentName:"p"},"1/number of rows")," and 1."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"CUME_DIST()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the cumulative distribution of number of flights by airline from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    CUME_DIST() OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "cume_dist"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n   AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"cume_dist")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.25"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.3333333333333333"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"current_date"},"CURRENT_DATE"),(0,r.kt)("p",null,"Returns the current date in UTC time, unless you specify a different timezone in the query context."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CURRENT_DATE")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the current date."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT CURRENT_DATE AS "current_date"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"current_date")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2024-08-14T00:00:00.000Z ")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"current_timestamp"},"CURRENT_TIMESTAMP"),(0,r.kt)("p",null,"Returns the current timestamp in UTC time, unless you specify a different timezone in the query context."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"CURRENT_TIMESTAMP")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the current timestamp."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT CURRENT_TIMESTAMP AS "current_timestamp"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"current_timestamp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2024-08-14T21:30:13.793Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"date_trunc"},"DATE_TRUNC"),(0,r.kt)("p",null,"Rounds down a timestamp by a given time unit."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DATE_TRUNC(unit, timestamp_expr)")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example truncates a timestamp from the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource to the most recent ",(0,r.kt)("inlineCode",{parentName:"p"},"decade"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_timestamp",\n  DATE_TRUNC(\'decade\', "__time") AS "truncate_timestamp"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_timestamp")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"truncate_time")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2010-01-01T00:00:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"decode_base64_complex"},"DECODE_BASE64_COMPLEX"),(0,r.kt)("p",null,"Decodes a Base64-encoded expression into a complex data type."),(0,r.kt)("p",null,"You can use the function to ingest data when a column contains an encoded data sketch such as Theta or HLL."),(0,r.kt)("p",null,"The function supports ",(0,r.kt)("inlineCode",{parentName:"p"},"hyperUnique")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"serializablePairLongString")," data types by default.\nTo enable support for a complex data type, load the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/configuration/extensions"},"corresponding extension"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-bloom-filter"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"bloom")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-datasketches"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"arrayOfDoublesSketch"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"HLLSketch"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"KllDoublesSketch"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"KllFloatsSketch"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"quantilesDoublesSketch"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"thetaSketch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-histogram"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"approximateHistogram"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"fixedBucketsHistogram")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-stats"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"variance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-compressed-bigdecimal"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"compressedBigDecimal")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-momentsketch"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"momentSketch")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"druid-tdigestsketch"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"tDigestSketch"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DECODE_BASE64_COMPLEX(dataType, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns a Theta sketch complex type from a Base64-encoded string representation of the sketch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DECODE_BASE64_COMPLEX('thetaSketch','AgMDAAAazJNBAAAAAACAP+k/tkWGkSoFYWMAG0y+3gVabvKcIUNrBv0jAkGsw7sK5szX1k0ScwtMfCQmFP/rDhFK6yU7PPkObZ/Ugw5fcBQZ+GaO+Nt6FP+Whz6TmxkWyRJ+gaQLFhcts1+c0Q/vF9FLFfaVlOkb3/XpXaZ3JhyZ2dG8Di2/HO10sMs9C0AdM4FdHuye6SB+GYinIhTOITOHzB5SAfIiph3de9qIGSM89V+s/TkdI/WZVzK9wF0npfi4ZrmgBSnVjphCtQA5K2fp0x59UCwvMopZarsSkzEo81OIxjznNNXLr1BbQBo1Ei3OxJOoNzVs0x9xzsm4NfgAZSvZQvI1c2TmPsZvlzpW7tmIlizOOsr6pGWoh0U99/tV8RFwhz0SJoWyU1Z2P0hZ5d7KRnZBjlWC+e/FLEKrWsu14rlFRXhsOuxRId9FboEuH9PqMUixI2lB8MhLS803hJDoZ7tMy7Egl+YNU04QM11stXX4Tu96NHHcGiZRuCyciGiTGVQflMLmNt6lW6zIwJy0baNdbwjMCTjtUF7oZOtugWLYYJE9sJU3HuVijc0J10l6SmPslbfY6Fw0Za9w/Zdhn/5nIuKc1WMrYWnAJQJKXY73bHYWq7gI6dRvYdC2fLJyv3F8qwQcOJgFc0GaGXw8KRF3w3IVCwxsMntWhdTkaJ88e++5NFyM1Hd/D79wg0b9vH8=') AS \"theta_sketch\"\n")),(0,r.kt)("p",null,"You can perform Theta sketch operations on the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<thetaSketch>")," value which resembles the input string. ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"decode_base64_utf8"},"DECODE_BASE64_UTF8"),(0,r.kt)("p",null,"Decodes a Base64-encoded expression into a UTF-8 encoded string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DECODE_BASE64_UTF8(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,'The following example decodes the Base64-encoded representation of "Hello, World!":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  DECODE_BASE64_UTF8('SGVsbG8sIFdvcmxkIQ==') as decoded\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"decoded")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Hello, World!")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"degrees"},"DEGREES"),(0,r.kt)("p",null,"Converts an angle from radians to degrees."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DEGREES(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts an angle of ",(0,r.kt)("inlineCode",{parentName:"p"},"PI")," radians to degrees"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DEGREES(PI) AS "degrees"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"degrees")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"180")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"dense_rank"},"DENSE_RANK"),(0,r.kt)("p",null,"Returns the rank for a row within a window without gaps. For example, if two rows tie for a rank of 1, the subsequent row is ranked 2."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DENSE_RANK()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the dense rank by airline for flights from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    DENSE_RANK() OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "dense_rank"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"dense_rank")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"div"},"DIV"),(0,r.kt)("p",null,"Returns the result of integer division of ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DIV")," function is not implemented in Druid versions 30.0.0 or earlier. Consider using ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-functions#safe_divide"},(0,r.kt)("inlineCode",{parentName:"a"},"SAFE_DIVIDE"))," instead. ")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DIV(x, y)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"  The following calculates integer divisions of ",(0,r.kt)("inlineCode",{parentName:"p"},"78")," by ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DIV(78, 10) as "division"\n')),(0,r.kt)("p",null,"  Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"division")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"7")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_cdf"},"DS_CDF"),(0,r.kt)("p",null,"Returns a string representing an approximation to the cumulative distribution function given a list of split points that define the edges of the bins from a Quantiles sketch.  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_CDF(expr, splitPoint0, splitPoint1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example specifies three split points to return cumulative distribution function approximations on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The query may return a different approximation for each bin on each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_CDF( DS_QUANTILES_SKETCH("Distance"), 750, 1500, 2250) AS "estimate_cdf"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_cdf")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0.6332237016416492,0.8908411023460711,0.9612303007393957,1.0]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_get_quantile"},"DS_GET_QUANTILE"),(0,r.kt)("p",null,"Returns the quantile estimate corresponding to the fraction from a Quantiles sketch. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_GET_QUANTILE(expr, fraction)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example approximates the median of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The query may return a different approximation with each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_GET_QUANTILE( DS_QUANTILES_SKETCH("Distance"), 0.5) AS "estimate_median"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_median")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"569")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_get_quantiles"},"DS_GET_QUANTILES"),(0,r.kt)("p",null,"Returns a string representing an array of quantile estimates corresponding to a list of fractions from a Quantiles sketch. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_GET_QUANTILES(expr, fraction0, fraction1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example approximates the 25th, 50th, and 75th percentiles of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The query may return a different approximation for each percentile on each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_GET_QUANTILES( DS_QUANTILES_SKETCH("Distance"), 0.25, 0.5, 0.75) AS "estimate_fractions"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_fractions")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[316.0,571.0,951.0]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_histogram"},"DS_HISTOGRAM"),(0,r.kt)("p",null,"Returns an approximation to the histogram from a Quantiles sketch. The split points define the histogram bins. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_HISTOGRAM(expr, splitPoint0, splitPoint1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example specifies three split points to approximate a histogram on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. The query may return a different approximation for each bin on each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_HISTOGRAM( DS_QUANTILES_SKETCH("Distance"), 750, 1500, 2250) AS "estimate_histogram"\nFROM "flight-carriers"\n\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_histogram")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[358496.0,153974.99999999997,39909.99999999999,13757.000000000005]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_hll"},"DS_HLL"),(0,r.kt)("p",null,"Creates a HLL sketch on a column containing HLL sketches or a regular column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-hll"},"DataSketches HLL Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:"),(0,r.kt)("inlineCode",{parentName:"li"},"DS_HLL(expr, [lgK, tgtHllType])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a HLL sketch on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource grouping by ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DestState"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginState" AS "origin_state",\n  "DestState" AS "destination_state",\n  DS_HLL("Tail_Number") AS "hll_tail_number"\nFROM "flight-carriers"\nGROUP BY 1,2\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"destination_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"hll_tail_number")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"AwEHDAcIAAFBAAAAfY..."')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"ds_quantile_summary"},"DS_QUANTILE_SUMMARY"),(0,r.kt)("p",null,"Returns a string summary of a Quantiles sketch. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_QUANTILE_SUMMARY(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns a summary of a Quantiles sketch on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_QUANTILE_SUMMARY( DS_QUANTILES_SKETCH("Distance") ) AS "summary"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"summary"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### Quantiles DirectCompactDoublesSketch SUMMARY: \n   Empty                        : false\n   Memory, Capacity bytes       : true, 6128\n   Estimation Mode              : true\n   K                            : 128\n   N                            : 566,138\n   Levels (Needed, Total, Valid): 12, 12, 5\n   Level Bit Pattern            : 100010100011\n   BaseBufferCount              : 122\n   Combined Buffer Capacity     : 762\n   Retained Items               : 762\n   Compact Storage Bytes        : 6,128\n   Updatable Storage Bytes      : 14,368\n   Normalized Rank Error        : 1.406%\n   Normalized Rank Error (PMF)  : 1.711%\n   Min Item                     : 2.400000e+01\n   Max Item                     : 4.962000e+03\n### END SKETCH SUMMARY\n")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_quantiles_sketch"},"DS_QUANTILES_SKETCH"),(0,r.kt)("p",null,"Creates a Quantiles sketch on a Quantiles sketch column or a regular column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-quantiles"},"DataSketches Quantiles Sketch module")," for a description of parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_QUANTILES_SKETCH(expr, [k])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a Quantile sketch on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_QUANTILES_SKETCH("Distance") AS "quantile_sketch"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"quantile_sketch")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AgMIGoAAAAB6owgAA...")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"ds_rank"},"DS_RANK"),(0,r.kt)("p",null,"Returns an approximate rank of a given value in a distribution. The rank represents the fraction of the distribution less than the given value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_RANK(expr, value)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the fraction of records in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource where the value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Distance")," column is less than 500. The query may return a different approximation on each execution."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT DS_RANK( DS_QUANTILES_SKETCH("Distance"), 500) AS "estimate_rank"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns a result similar to the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_rank")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.43837721544923675 ")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_theta"},"DS_THETA"),(0,r.kt)("p",null,"Creates a Theta sketch on a column containing Theta sketches or a regular column. See ",(0,r.kt)("a",{parentName:"p",href:"../development/extensions-core/datasketches-theta#aggregator"},"DataSketches Theta Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_THETA(expr, [size])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a Theta sketch on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource grouping by ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DestState"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginState" AS "origin_state",\n  "DestState" AS "destination_state",\n  DS_THETA("Tail_Number") AS "theta_tail_number"\nFROM "flight-carriers"\nGROUP BY 1,2\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"destination_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"theta_tail_number")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AgMDAAAazJNBAAAAA...")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"ds_tuple_doubles"},"DS_TUPLE_DOUBLES"),(0,r.kt)("p",null,"Creates a Tuple sketch on raw data or a precomputed sketch column. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-tuple"},"DataSketches Tuple Sketch module")," for a description of parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES(expr[, nominalEntries])"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES(dimensionColumnExpr, metricColumnExpr1[, metricColumnExpr2, ...], [nominalEntries])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a Tuples sketch column that stores the arrival and departure delay minutes for each airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes", "DepDelayMinutes") AS tuples_delay\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tuples_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.0")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"ds_tuple_doubles_intersect"},"DS_TUPLE_DOUBLES_INTERSECT"),(0,r.kt)("p",null,"Returns an intersection of Tuple sketches which each contain an array of double values as their Summary Objects. The values contained in the Summary Objects are summed when combined. If the last value of the array is a numeric literal, Druid assumes that the value is an override parameter for ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-tuple"},"nominal entries"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES_INTERSECT(expr, ..., [nominalEntries])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the total minutes of arrival delay for airlines flying out of ",(0,r.kt)("inlineCode",{parentName:"p"},"SFO")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"LAX"),".\nAn airline that doesn't fly out of both airports returns a value of 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE(\n    DS_TUPLE_DOUBLES_INTERSECT(\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'SFO\'),\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'LAX\')\n    )\n  ) AS arrival_delay_sfo_lax\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_delay_sfo_lax")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[33296]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[13694]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"B6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CO")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[13582]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#tuple-sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_tuple_doubles_metrics_sum_estimate"},"DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE"),(0,r.kt)("p",null,"Computes approximate sums of the values contained within a Tuple sketch which contains an array of double values as the Summary Object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the sum of arrival and departure delay minutes for each airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE(DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes", "DepDelayMinutes")) AS sum_delays\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sum_delays")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[612831,474309]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[157340,141462]"))))),(0,r.kt)("p",null,"Compare this example with an analogous SQL statement that doesn't use approximations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  SUM("ArrDelayMinutes") AS sum_arrival_delay,\n  SUM("DepDelayMinutes") AS sum_departure_delay\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sum_arrival_delay")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sum_departure_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"612831")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"475735"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"157340")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"143620")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#tuple-sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_tuple_doubles_not"},"DS_TUPLE_DOUBLES_NOT"),(0,r.kt)("p",null,"Returns a set difference of Tuple sketches which each contain an array of double values as their Summary Objects. The values contained in the Summary Object are preserved as is. If the last value of the array is a numeric literal, Druid assumes that the value is an override parameter for ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-tuple"},"nominal entries"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES_NOT(expr, ..., [nominalEntries])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the total minutes of arrival delay for airlines that fly out of ",(0,r.kt)("inlineCode",{parentName:"p"},"SFO")," but not ",(0,r.kt)("inlineCode",{parentName:"p"},"LAX"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE(\n    DS_TUPLE_DOUBLES_NOT(\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'SFO\'),\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'LAX\')\n    )\n  ) AS arrival_delay_sfo_lax\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_delay_sfo_lax")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"B6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CO")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[93]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#tuple-sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"ds_tuple_doubles_union"},"DS_TUPLE_DOUBLES_UNION"),(0,r.kt)("p",null,"Returns a union of Tuple sketches which each contain an array of double values as their Summary Objects. The values contained in the Summary Objects are summed when combined. If the last value of the array is a numeric literal, Druid assumes that the value is an override parameter for ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-tuple"},"nominal entries"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"DS_TUPLE_DOUBLES_UNION(expr, ..., [nominalEntries])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the total minutes of arrival delay for airlines flying out of either ",(0,r.kt)("inlineCode",{parentName:"p"},"SFO")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"LAX"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "Reporting_Airline",\n  DS_TUPLE_DOUBLES_METRICS_SUM_ESTIMATE(\n    DS_TUPLE_DOUBLES_UNION(\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'SFO\'),\n      DS_TUPLE_DOUBLES("Reporting_Airline", "ArrDelayMinutes") FILTER(WHERE "Origin" = \'LAX\')\n    )\n  ) AS arrival_delay_sfo_lax\nFROM "flight-carriers"\nGROUP BY 1\nLIMIT 5\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Reporting_Airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_delay_sfo_lax")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[33296]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[13694]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"B6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[0]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CO")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[13582]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[93]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#tuple-sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"earliest"},"EARLIEST"),(0,r.kt)("p",null,"Returns the value of a numeric or string expression corresponding to the earliest ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"EARLIEST(expr, [maxBytesPerValue])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the origin airport code associated with the earliest departing flight daily after ",(0,r.kt)("inlineCode",{parentName:"p"},"'2005-01-01 00:00:00'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TIME_FLOOR(__time, \'P1D\') AS "departure_day",\n  EARLIEST("Origin") AS "origin"\nFROM "flight-carriers"\nWHERE __time >= TIMESTAMP \'2005-01-01 00:00:00\'\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"departure_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LAS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-02T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SDF")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"earliest_by"},"EARLIEST_BY"),(0,r.kt)("p",null,"Returns the value of a numeric or string expression corresponding to the earliest time value from ",(0,r.kt)("inlineCode",{parentName:"p"},"timestampExpr"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"EARLIEST_BY(expr, timestampExpr, [maxBytesPerValue])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the destination airport code associated with the earliest arriving flight daily after ",(0,r.kt)("inlineCode",{parentName:"p"},"'2005-01-01 00:00:00'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TIME_FLOOR(TIME_PARSE("arrivalime"), \'P1D\') AS "arrival_day",\n  EARLIEST_BY("Dest", TIME_PARSE("arrivalime")) AS "dest"\nFROM "flight-carriers"\nWHERE TIME_PARSE("arrivalime") >= TIMESTAMP \'2005-01-01 00:00:00\'\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RSW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-02T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CLE")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"exp"},"EXP"),(0,r.kt)("p",null,"Calculates ",(0,r.kt)("em",{parentName:"p"},"e")," raised to the power of the numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"EXP(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates ",(0,r.kt)("em",{parentName:"p"},"e")," to the power of 1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT EXP(1) AS "exponential" \n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"exponential")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2.7182818284590455")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"extract"},"EXTRACT"),(0,r.kt)("p",null,"Extracts the value of some unit from the timestamp."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"EXTRACT(unit FROM timestamp_expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example extracts the year from the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_time",\n  EXTRACT(YEAR FROM "__time" ) AS "year"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"year")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"first_value"},"FIRST_VALUE"),(0,r.kt)("p",null,"Returns the value evaluated for the expression for the first row within the window."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"FIRST_VALUE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the name of the first airline in the window of flights by airline for two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    FIRST_VALUE("Reporting_Airline") OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "first_val"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"first_val")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"floor"},"FLOOR"),(0,r.kt)("h3",{id:"date-and-time-1"},"Date and time"),(0,r.kt)("p",null,"Rounds down a timestamp by a given time unit. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"FLOOR(timestamp_expr TO unit)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example rounds down the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource to the nearest year."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "__time" AS "original_time",\n  FLOOR("__time" TO YEAR) AS "floor"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"floor")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-01-01T00:00:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h3",{id:"numeric-1"},"Numeric"),(0,r.kt)("p",null,"Calculates the largest integer less than or equal to the numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"FLOOR(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example applies the FLOOR function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fare_amount")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "fare_amount" AS "fare_amount",\n  FLOOR("fare_amount") AS "floor_fare_amount"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"fare_amount")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"floor_fare_amount")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"21.25")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"21")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"greatest"},"GREATEST"),(0,r.kt)("p",null,"Returns the maximum value from the provided expressions. For information on how Druid interprets the arguments passed into the function, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#reduction-functions"},"Reduction functions"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"GREATEST([expr1, ...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, reduction")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the greatest value between the numeric constant ",(0,r.kt)("inlineCode",{parentName:"p"},"PI"),", the integer number ",(0,r.kt)("inlineCode",{parentName:"p"},"4"),", and the double ",(0,r.kt)("inlineCode",{parentName:"p"},"-5.0"),". Druid interprets these arguments as DOUBLE data type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT GREATEST(PI, 4, -5.0) AS "greatest"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"greatest")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#reduction-functions"},"Learn more")),(0,r.kt)("h2",{id:"grouping"},"GROUPING"),(0,r.kt)("p",null,"Returns a number for each output row of a groupBy query, indicating whether the specified dimension is included for that row."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"GROUPING(expr, expr...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the total minutes of flight delay for each day of the week in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),".\nThe GROUP BY clause creates two grouping sets, one for the day of the week and one for the grand total."),(0,r.kt)("p",null,"For more information, refer to ",(0,r.kt)("a",{parentName:"p",href:"#case"},"CASE")," and grouping sets with ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql#group-by"},"SQL GROUP BY"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  CASE\n     WHEN GROUPING("DayOfWeek") = 1 THEN \'Total\'\n     ELSE "DayOfWeek"\n  END AS "DayOfWeek",\n  GROUPING("DayOfWeek") AS Subgroup,\n  SUM("DepDelayMinutes") AS "MinutesDelayed"\nFROM "flight-carriers"\nGROUP BY GROUPING SETS("DayOfWeek", ())\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"DayOfWeek")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"Subgroup")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"MinutesDelayed")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"998505"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1031599"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"884677"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"525351"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"519413"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"6")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"354601"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"7")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"848704"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Total")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5162850")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"hll_sketch_estimate"},"HLL_SKETCH_ESTIMATE"),(0,r.kt)("p",null,"Returns the distinct count estimate from a HLL sketch. To round the distinct count estimate, set ",(0,r.kt)("inlineCode",{parentName:"p"},"round")," to true. ",(0,r.kt)("inlineCode",{parentName:"p"},"round")," defaults to false."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HLL_SKETCH_ESTIMATE(expr, [round])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the distinct number of unique tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  HLL_SKETCH_ESTIMATE(DS_HLL("Tail_Number")) AS "estimate"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4685.8815405960595")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"hll_sketch_estimate_with_error_bounds"},"HLL_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS"),(0,r.kt)("p",null,"Returns the distinct count estimate and error bounds from a HLL sketch. To specify the number of standard bound deviations, use ",(0,r.kt)("inlineCode",{parentName:"p"},"numStdDev"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HLL_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS(expr, [numStdDev])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the number of unique tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource with error bounds at plus or minus one standard deviation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  HLL_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS(DS_HLL("Tail_Number"), 1) AS "estimate_with_errors"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_with_errors")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[4685.8815405960595,4611.381540678335,4762.978259800803]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"hll_sketch_to_string"},"HLL_SKETCH_TO_STRING"),(0,r.kt)("p",null,"Returns a human-readable string representation of a HLL sketch for debugging."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HLL_SKETCH_TO_STRING(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the HLL sketch on column ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource as a human-readable string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  HLL_SKETCH_TO_STRING( DS_HLL("Tail_Number") ) AS "summary"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"summary"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"### HLL SKETCH SUMMARY: \n  Log Config K   : 12\n  Hll Target     : HLL_4\n  Current Mode   : HLL\n  Memory         : false\n  LB             : 4611.381540678335\n  Estimate       : 4685.8815405960595\n  UB             : 4762.978259800803\n  OutOfOrder Flag: true\n  CurMin         : 0\n  NumAtCurMin    : 1316\n  HipAccum       : 0.0\n  KxQ0           : 2080.7755126953125\n  KxQ1           : 0.0\n  Rebuild KxQ Flg: false\n")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"hll_sketch_union"},"HLL_SKETCH_UNION"),(0,r.kt)("p",null,"Returns a union of HLL sketches. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/datasketches-hll"},"DataSketches HLL Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HLL_SKETCH_UNION([lgK, tgtHllType], expr0, expr1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the union of the HLL sketch of tail numbers that took off from ",(0,r.kt)("inlineCode",{parentName:"p"},"CA")," and the HLL sketch of tail numbers that took off from ",(0,r.kt)("inlineCode",{parentName:"p"},"TX"),". The example uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," columns from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  HLL_SKETCH_ESTIMATE(\n    HLL_SKETCH_UNION( \n      DS_HLL("Tail_Number") FILTER(WHERE "OriginState" = \'CA\'),\n      DS_HLL("Tail_Number") FILTER(WHERE "OriginState" = \'TX\')\n    )\n  ) AS "estimate_union"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_union")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4204.798431046455")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"human_readable_binary_byte_format"},"HUMAN_READABLE_BINARY_BYTE_FORMAT"),(0,r.kt)("p",null,"Converts an integer byte size into human-readable ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Binary_prefix"},"IEC")," format."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HUMAN_READABLE_BINARY_BYTE_FORMAT(value[, precision])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"  The following example converts ",(0,r.kt)("inlineCode",{parentName:"p"},"1000000")," into IEC format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'  SELECT HUMAN_READABLE_BINARY_BYTE_FORMAT(1000000, 2) AS "iec_format"\n')),(0,r.kt)("p",null,"  Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"iec_format")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"976.56 KiB")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"human_readable_decimal_byte_format"},"HUMAN_READABLE_DECIMAL_BYTE_FORMAT"),(0,r.kt)("p",null,"Converts a byte size into human-readable ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Binary_prefix"},"SI")," format."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HUMAN_READABLE_DECIMAL_BYTE_FORMAT(value[, precision])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts ",(0,r.kt)("inlineCode",{parentName:"p"},"1000000")," into SI format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT HUMAN_READABLE_DECIMAL_BYTE_FORMAT(1000000, 2) AS "si_format"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"si_format")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.00 MB")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"human_readable_decimal_format"},"HUMAN_READABLE_DECIMAL_FORMAT"),(0,r.kt)("p",null,"Converts a byte size into human-readable SI format with single-character units."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"HUMAN_READABLE_DECIMAL_FORMAT(value[, precision])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"  The following example converts ",(0,r.kt)("inlineCode",{parentName:"p"},"1000000")," into single character SI format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT HUMAN_READABLE_DECIMAL_FORMAT(1000000, 2) AS "single_character_si_format"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"single_character_si_format")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.00 M")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"icontains_string"},"ICONTAINS_STRING"),(0,r.kt)("p",null,"Returns true if ",(0,r.kt)("inlineCode",{parentName:"p"},"str")," is a substring of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),", case-insensitive. Otherwise, returns false."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ICONTAINS_STRING(expr, str)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource contains the case-insensitive substring ",(0,r.kt)("inlineCode",{parentName:"p"},"san"),".  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginCityName" AS "origin_city",\n  ICONTAINS_STRING("OriginCityName", \'san\') AS "contains_case_insensitive_string"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"contains_case_insensitive_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boston, MA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"ipv4_match"},"IPV4_MATCH"),(0,r.kt)("p",null,"Returns true if the IPv4 ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," belongs to the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet")," literal, otherwise returns false."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"IPV4_MATCH(address, subnet)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, IP address")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true if the IPv4 address in the ",(0,r.kt)("inlineCode",{parentName:"p"},"forward_for")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"kttm")," datasource belongs to the subnet ",(0,r.kt)("inlineCode",{parentName:"p"},"181.13.41.0/24"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "forwarded_for" AS "ipv4_address",\n  IPV4_MATCH("forwarded_for", \'181.13.41.0/24\') AS "belongs_in_subnet"\nFROM "kttm"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ipv4_address")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"belongs_in_subnet")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"181.13.41.82")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"177.242.100.0")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#ip-address-functions"},"Learn more")),(0,r.kt)("h2",{id:"ipv4_parse"},"IPV4_PARSE"),(0,r.kt)("p",null,"Parses an IPv4 ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," into its integer notation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"IPV4_PARSE(address)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, IP address")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns an integer that represents the IPv4 address ",(0,r.kt)("inlineCode",{parentName:"p"},"5.5.5.5"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '5.5.5.5' AS \"ipv4_address\",\n  IPV4_PARSE('5.5.5.5') AS \"integer\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ipv4_address")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"integer")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5.5.5.5")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"84215045")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#ip-address-functions"},"Learn more")),(0,r.kt)("h2",{id:"ipv4_stringify"},"IPV4_STRINGIFY"),(0,r.kt)("p",null,"Converts an IPv4 ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," in integer notation into dot-decimal notation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"IPV4_STRINGIFY(address)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, IP address")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the integer ",(0,r.kt)("inlineCode",{parentName:"p"},"84215045")," in IPv4 dot-decimal notation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  \'84215045\' AS "integer",\n  IPV4_STRINGIFY(84215045) AS "dot_decimal_notation"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"integer")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"dot_decimal_notation")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"84215045")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5.5.5.5")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#ip-address-functions"},"Learn more")),(0,r.kt)("h2",{id:"ipv6_match"},"IPV6_MATCH"),(0,r.kt)("p",null,"Returns true if the IPv6 ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," belongs to the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet")," literal. Otherwise, returns false."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"IPV6_MATCH(address, subnet)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, IP address")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true because ",(0,r.kt)("inlineCode",{parentName:"p"},"75e9:efa4:29c6:85f6::232c")," is in the subnet of ",(0,r.kt)("inlineCode",{parentName:"p"},"75e9:efa4:29c6:85f6::/64"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '75e9:efa4:29c6:85f6::232c' AS \"ipv6_address\",\n  IPV6_MATCH('75e9:efa4:29c6:85f6::232c', '75e9:efa4:29c6:85f6::/64') AS \"belongs_in_subnet\" \n")),(0,r.kt)("p",null,"Returns the following: "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ipv6_address")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"belongs_in_subnet")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"75e9:efa4:29c6:85f6::232c")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#ip-address-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_keys"},"JSON_KEYS"),(0,r.kt)("p",null,"Returns an array of field names from an expression, at a specified path."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_KEYS(expr, path)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns an array of field names from the nested column ",(0,r.kt)("inlineCode",{parentName:"p"},"agent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  JSON_KEYS(agent, '$.') AS agent_keys\nFROM \"kttm_nested\"\nLIMIT 1\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"agent_keys")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[type, category, browser, browser_version, os, platform]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_merge"},"JSON_MERGE"),(0,r.kt)("p",null,"Merges two or more JSON ",(0,r.kt)("inlineCode",{parentName:"p"},"STRING")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," expressions into one, preserving the rightmost value when there are key overlaps.\nThe function always returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_MERGE(expr1, expr2[, expr3 ...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example merges the ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," object with a static string ",(0,r.kt)("inlineCode",{parentName:"p"},"example_string"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  event,\n  JSON_MERGE(event, \'{"example_string": 123}\') as event_with_string\nFROM "kttm_nested"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"event")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"event_with_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":55}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":55,"example_string":123}')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_object"},"JSON_OBJECT"),(0,r.kt)("p",null,"Constructs a new ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object from one or more expressions.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY")," expressions must evaluate to string types.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"VALUE")," expressions can be composed of any input type, including other ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," objects.\nThe function can accept colon-separated key-value pairs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_OBJECT(KEY expr1 VALUE expr2[, KEY expr3 VALUE expr4, ...])"),(0,r.kt)("br",{parentName:"li"}),"or",(0,r.kt)("br",{parentName:"li"}),(0,r.kt)("inlineCode",{parentName:"li"},"JSON_OBJECT(expr1:expr2[, expr3:expr4, ...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a new object ",(0,r.kt)("inlineCode",{parentName:"p"},"combinedJSON")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"continent")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"geo_ip")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"event"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  JSON_OBJECT(\n     KEY 'geo_ip' VALUE JSON_QUERY(geo_ip, '$.continent'),\n     KEY 'event' VALUE JSON_QUERY(event, '$.type')\n     )\n  as combined_JSON\nFROM \"kttm_nested\"\nLIMIT 1\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"combined_JSON")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"geo_ip": {"continent": "South America"},"event": {"type": "PercentClear"}}')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_paths"},"JSON_PATHS"),(0,r.kt)("p",null,"Returns an array of all paths which refer to literal values in an expression, in JSONPath format."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_PATHS(expr)"),"  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns an array of distinct paths in the ",(0,r.kt)("inlineCode",{parentName:"p"},"geo_ip")," nested column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  ARRAY_CONCAT_AGG(DISTINCT JSON_PATHS(geo_ip)) AS geo_ip_paths\nfrom "kttm_nested"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"geo_ip_paths")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[$.city, $.continent, $.country, $.region]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_query"},"JSON_QUERY"),(0,r.kt)("p",null,"Extracts a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," value from an expression at a specified path."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_QUERY(expr, path)"),"  "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the values of ",(0,r.kt)("inlineCode",{parentName:"p"},"percentage")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," nested column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n   "event",\n   JSON_QUERY("event", \'$.percentage\')\nFROM "kttm_nested"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"event")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"percentage")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":55}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"55"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":80}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"80")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_query_array"},"JSON_QUERY_ARRAY"),(0,r.kt)("p",null,"Extracts an ",(0,r.kt)("inlineCode",{parentName:"p"},"ARRAY<COMPLEX<json>>")," value from an expression at a specified path."),(0,r.kt)("p",null,"If the value isn't an array, the function translates it into a single element ",(0,r.kt)("inlineCode",{parentName:"p"},"ARRAY")," containing the value at ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),".\nThis function is mainly used to extract arrays of objects to use as inputs to other ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"array functions"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_QUERY_ARRAY(expr, path)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"percentage")," values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," nested column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n   "event",\n   JSON_QUERY_ARRAY("event", \'$.percentage\')\nFROM "kttm_nested"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"event")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"percentage")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":55}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[55]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"type":"PercentClear","percentage":80}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[80]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"json_value"},"JSON_VALUE"),(0,r.kt)("p",null,"Extracts a literal value from an expression at a specified path."),(0,r.kt)("p",null,"If you include ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURNING")," and specify a SQL type (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"BIGINT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DOUBLE"),") the function plans the query using the suggested type.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURNING")," isn't included, the function attempts to infer the type based on the context.\nIf the function can't infer the type, it defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"JSON_VALUE(expr, path [RETURNING sqlType])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"city")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"geo_ip")," nested column:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  geo_ip,\n  JSON_VALUE(geo_ip, '$.city' RETURNING VARCHAR) as city\nFROM \"kttm_nested\"\nWHERE JSON_VALUE(geo_ip, '$.continent') = 'Asia'\nLIMIT 2\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"geo_ip")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"city")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"continent":"Asia","country":"Taiwan","region":"Taipei City","city":"Taipei"}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Taipei"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"continent":"Asia","country":"Thailand","region":"Bangkok","city":"Bangkok"}')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Bangkok")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"lag"},"LAG"),(0,r.kt)("p",null,"If you do not supply an ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),", returns the value evaluated at the row preceding the current row. Specify an offset number ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," to return the value evaluated at ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," rows preceding the current one."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LAG(expr[, offset])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the preceding airline in the window for flights by airline from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    LAG("Reporting_Airline") OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "lag"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"lag")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"last_value"},"LAST_VALUE"),(0,r.kt)("p",null,"Returns the value evaluated for the expression for the last row within the window."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LAST_VALUE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the last airline name in the window for flights for two airports on a single day.\nNote that the RANGE BETWEEN clause defines the window frame between the current row and the final row in the window instead of the default of RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW when using ORDER BY."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    LAST_VALUE("Reporting_Airline") OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC\n      RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS "last_value"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"last_value")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"latest"},"LATEST"),(0,r.kt)("p",null,"Returns the value of a numeric or string expression corresponding to the latest ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LATEST(expr, [maxBytesPerValue])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the origin airport code associated with the latest departing flight daily after ",(0,r.kt)("inlineCode",{parentName:"p"},"'2005-01-01 00:00:00'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TIME_FLOOR(__time, \'P1D\') AS "departure_day",\n  LATEST("Origin") AS "origin"\nFROM "flight-carriers"\nWHERE __time >= TIMESTAMP \'2005-01-01 00:00:00\'\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"departure_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LAS"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-02T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LAX")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"latest_by"},"LATEST_BY"),(0,r.kt)("p",null,"Returns the value of a numeric or string expression corresponding to the latest time value from ",(0,r.kt)("inlineCode",{parentName:"p"},"timestampExpr"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LATEST_BY(expr, timestampExpr, [maxBytesPerValue])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the destination airport code associated with the latest arriving flight daily after ",(0,r.kt)("inlineCode",{parentName:"p"},"'2005-01-01 00:00:00'")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TIME_FLOOR(TIME_PARSE("arrivalime"), \'P1D\') AS "arrival_day",\n  LATEST_BY("Dest", TIME_PARSE("arrivalime")) AS "dest"\nFROM "flight-carriers"\nWHERE TIME_PARSE("arrivalime") >= TIMESTAMP \'2005-01-01 00:00:00\'\nGROUP BY 1\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arrival_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MCO"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-02T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BUF")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"lead"},"LEAD"),(0,r.kt)("p",null,"If you do not supply an ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),", returns the value evaluated at the row following the current row. Specify an offset number ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," to return the value evaluated at ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," rows following the current one; if there is no such row, returns the given default value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"LEAD(expr[, offset])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the subsequent value for an airline in the window for flights from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    LEAD("Reporting_Airline") OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "lead"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights ")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"lead")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"least"},"LEAST"),(0,r.kt)("p",null,"Returns the minimum value from the provided expressions. For information on how Druid interprets the arguments passed into the function, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#reduction-functions"},"Reduction functions"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LEAST([expr1, ...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, reduction")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the minimum value between the strings ",(0,r.kt)("inlineCode",{parentName:"p"},"apple"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orange"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"pear"),". Druid interprets these arguments as STRING data type. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT LEAST( 'apple', 'orange', 'pear') AS \"least\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"least")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"apple")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#reduction-functions"},"Learn more")),(0,r.kt)("h2",{id:"left"},"LEFT"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," leftmost characters of an expression, where ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is an integer value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LEFT(expr, N)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," leftmost characters of the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"ABCDEFG"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  'ABCDEFG' AS \"expression\",\n  LEFT('ABCDEFG', 3) AS \"leftmost_characters\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"expression")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"leftmost_characters")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ABCDEFG")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ABC")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"length"},"LENGTH"),(0,r.kt)("p",null,"Returns the length of the expression in UTF-16 code units."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LENGTH(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the character length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city_name",\n  LENGTH("OriginCityName") AS "city_name_length"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city_name")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"city_name_length")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"12")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"listagg"},"LISTAGG"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#string_agg"},(0,r.kt)("inlineCode",{parentName:"a"},"STRING_AGG")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LISTAGG([DISTINCT] expr, [separator, [size]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"ln"},"LN"),(0,r.kt)("p",null,"Calculates the natural logarithm of the numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LN(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example applies the LN function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_temperature")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "max_temperature" AS "max_temperature",\n  LN("max_temperature") AS "natural_log_max_temp"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"max_temperature")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"natural_log_max_temp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"76")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4.330733340286331")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"log10"},"LOG10"),(0,r.kt)("p",null,"Calculates the base-10 logarithm of the numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LOG10(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example applies the LOG10 function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"max_temperature")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "max_temperature" AS "max_temperature",\n  LOG10("max_temperature") AS "log10_max_temp"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"max_temperature")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"log10_max_temp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"76")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.8808135922807914")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"lookup"},"LOOKUP"),(0,r.kt)("p",null,"Searches for ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," in a registered ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/lookups"},"query-time lookup table")," named ",(0,r.kt)("inlineCode",{parentName:"p"},"lookupName")," and returns the mapped value. If ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," is null or not contained in the lookup, returns ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," if supplied, otherwise returns null."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LOOKUP(expr, lookupName[, defaultValue])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," type lookup table named ",(0,r.kt)("inlineCode",{parentName:"p"},"code_to_name"),", which contains the following key-value pairs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "SJU": "Luis Munoz Marin International Airport",\n  "IAD": "Dulles International Airport"\n}\n')),(0,r.kt)("p",null,"The example uses ",(0,r.kt)("inlineCode",{parentName:"p"},"code_to_name")," to map the ",(0,r.kt)("inlineCode",{parentName:"p"},"Origin")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to the corresponding full airport name. Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"key not found")," if no matching key exists in the lookup table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "Origin" AS "origin_airport",\n  LOOKUP("Origin", \'code_to_name\',\'key not found\') AS "full_airport_name"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"full_airport_name")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SJU")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Luis Munoz Marin International Airport"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BOS")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key not found")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"lower"},"LOWER"),(0,r.kt)("p",null,"Returns the expression in lowercase."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LOWER(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to lowercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city",\n  LOWER("OriginCityName") AS "lowercase"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"lowercase")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"san juan, pr")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"lpad"},"LPAD"),(0,r.kt)("p",null,"Returns a string of size ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),". When the length of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," is less than ",(0,r.kt)("inlineCode",{parentName:"p"},"length"),", left pads ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"chars"),", which defaults to the space character. Truncates ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," is shorter than the length of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LPAD(expr, length[, chars])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example left pads the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginStateName")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to return a total of 11 characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginStateName" AS "origin_state",\n  LPAD("OriginStateName", 11, \'+\') AS "add_left_padding"\nFROM "flight-carriers"\nLIMIT 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"add_left_padding")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Puerto Rico")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Puerto Rico"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Massachusetts")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Massachuset"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Florida")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"++++Florida")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"ltrim"},"LTRIM"),(0,r.kt)("p",null,"Trims characters from the leading end of an expression. Defaults ",(0,r.kt)("inlineCode",{parentName:"p"},"chars")," to a space if none is provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"LTRIM(expr[, chars])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example trims the ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," characters from the leading end of the string expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '___abc___' AS \"original_string\",\n  LTRIM('___abc___', '_') AS \"trim_leading_end_of_expression\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"trim_leading_end_of_expression")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"___abc___")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc___")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"max"},"MAX"),(0,r.kt)("p",null,"Returns the maximum value of a set of values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"MAX(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the maximum delay in minutes for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MAX("DepDelayMinutes") AS max_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"max_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1210")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"millis_to_timestamp"},"MILLIS_TO_TIMESTAMP"),(0,r.kt)("p",null,"Converts a number of milliseconds since epoch into a timestamp."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MILLIS_TO_TIMESTAMP(millis_expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts 1375344877000 milliseconds from epoch into a timestamp. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MILLIS_TO_TIMESTAMP(1375344877000) AS "timestamp"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"timestamp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"min"},"MIN"),(0,r.kt)("p",null,"Returns the minimum value of a set of values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"MIN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the minimum delay in minutes for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MIN("DepDelayMinutes") AS min_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"min_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"mod"},"MOD"),(0,r.kt)("p",null,"Calculates x modulo y, or the remainder of x divided by y. Where x and y are numeric expressions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MOD(x, y)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following calculates 78 MOD 10."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MOD(78, 10) as "modulo"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"modulo")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"8")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_append"},"MV_APPEND"),(0,r.kt)("p",null,"Adds the expression to the end of the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_APPEND(arr1, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example appends the string ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," to the multi-value string ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MV_APPEND("tags", "label") AS append\nFROM "mvd-example"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"append")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3","row1"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_concat"},"MV_CONCAT"),(0,r.kt)("p",null,"Concatenates two arrays."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_CONCAT(arr1, arr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example concatenates ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," to itself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MV_CONCAT("tags", "tags") AS cat\nFROM "mvd-example"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"cat")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3","t1","t2","t3"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_contains"},"MV_CONTAINS"),(0,r.kt)("p",null,"Returns true if the expression is in the array, false otherwise."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_CONTAINS(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example checks if the string ",(0,r.kt)("inlineCode",{parentName:"p"},"t3")," exists within ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_CONTAINS("tags", \'t3\') AS contained\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"contained")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_filter_none"},"MV_FILTER_NONE"),(0,r.kt)("p",null,"Filters a multi-value expression to exclude values from an array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_FILTER_NONE(expr, arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example filters ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," to remove values ",(0,r.kt)("inlineCode",{parentName:"p"},"t1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"t3"),", if present:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MV_FILTER_NONE(\"tags\", ARRAY['t1', 't3']) AS exclude\nFROM \"mvd-example\"\nLIMIT 3\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"exclude")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t4", "t5"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_filter_only"},"MV_FILTER_ONLY"),(0,r.kt)("p",null,"Filters a multi-value expression to include only values contained in the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_FILTER_ONLY(expr, arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example filters ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," to only contain the values ",(0,r.kt)("inlineCode",{parentName:"p"},"t1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"t3"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MV_FILTER_ONLY(\"tags\", ARRAY['t1', 't3']) AS filt\nFROM \"mvd-example\"\nLIMIT 3\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"filt")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t3"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"null"))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_length"},"MV_LENGTH"),(0,r.kt)("p",null,"Returns the length of an array expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_LENGTH(arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the length of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," multi-value strings from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MV_LENGTH("tags") AS len\nFROM "mvd-example"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"len")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_offset"},"MV_OFFSET"),(0,r.kt)("p",null,"Returns the array element at the given zero-based index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_OFFSET(arr, long)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," and the element at the third position of ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_OFFSET("tags", 2) AS elem\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"elem")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t7"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_offset_of"},"MV_OFFSET_OF"),(0,r.kt)("p",null,"Returns the zero-based index of the first occurrence of a given expression in the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_OFFSET_OF(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," and the zero-based index of the string ",(0,r.kt)("inlineCode",{parentName:"p"},"t3")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_OFFSET_OF("tags", \'t3\') AS index\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"index")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_ordinal"},"MV_ORDINAL"),(0,r.kt)("p",null,"Returns the array element at the given one-based index."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_ORDINAL(arr, long)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," and the element at the third position of ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_ORDINAL("tags", 3) AS elem\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"elem")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t7"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_ordinal_of"},"MV_ORDINAL_OF"),(0,r.kt)("p",null,"Returns the one-based index of the first occurrence of a given expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_ORDINAL_OF(arr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," and the one-based index of the string ",(0,r.kt)("inlineCode",{parentName:"p"},"t3")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_ORDINAL_OF("tags", \'t3\') AS index\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"index")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_overlap"},"MV_OVERLAP"),(0,r.kt)("p",null,"Returns true if the two arrays have any elements in common, false otherwise."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_OVERLAP(arr1, arr2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example identifies rows that contain ",(0,r.kt)("inlineCode",{parentName:"p"},"t1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"t3")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_OVERLAP("tags", ARRAY[\'t1\', \'t3\']) AS overlap\nFROM "mvd_example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"overlap")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_prepend"},"MV_PREPEND"),(0,r.kt)("p",null,"Adds the expression to the beginning of the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_PREPEND(expr, arr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example prepends the string dimension ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," to the multi-value string dimension ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MV_PREPEND("label", "tags") AS prepend\nFROM "mvd-example"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"prepend")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["row1","t1","t2","t3"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_slice"},"MV_SLICE"),(0,r.kt)("p",null,"Returns a slice of the array from the zero-based start and end indexes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_SLICE(arr, start, end)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," and the second and third values of ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "tags", MV_SLICE(tags, 1, 3) AS slice\nFROM "mvd-example"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tags")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"slice")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t1"","t2","t3"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t2","t3"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t3"","t4","t5"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t4","t5"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t5"","t6","t7"]')),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["t6","t7"]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_to_array"},"MV_TO_ARRAY"),(0,r.kt)("p",null,"Converts a multi-value string from a ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR ARRAY"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_TO_ARRAY(str)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example transforms the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," column from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," to arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT MV_TO_ARRAY(tags) AS arr\nFROM "mvd-example"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"arr")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[t1, t2, t3]")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"mv_to_string"},"MV_TO_STRING"),(0,r.kt)("p",null,"Joins all elements of the array together by the given delimiter."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"MV_TO_STRING(arr, str)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example transforms the ",(0,r.kt)("inlineCode",{parentName:"p"},"tags")," column from ",(0,r.kt)("inlineCode",{parentName:"p"},"mvd-example")," to strings delimited by a space character:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MV_TO_STRING(\"tags\", ' ') AS str\nFROM mvd-example\nLIMIT 1\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"str")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"t1 t2 t3")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"ntile"},"NTILE"),(0,r.kt)("p",null,"Divides the rows within a window as evenly as possible into the number of tiles, also called buckets, and returns the value of the tile that the row falls into."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"NTILE(tiles)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the results for flights by airline from two airports on a single day divided into 3 tiles."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    NTILE(3) OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "ntile"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"lead")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"ntile")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"nullif"},"NULLIF"),(0,r.kt)("p",null,"Returns null if two values are equal, else returns the first value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"NULLIF(value1, value2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns null if the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource is ",(0,r.kt)("inlineCode",{parentName:"p"},"PR"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "OriginState" AS "origin_state",\n  NULLIF("OriginState", \'PR\') AS "remove_pr"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"remove_pr")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"nvl"},"NVL"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"value1")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"value1")," is not null, otherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"NVL(value1, value1)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, other")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example replaces each null value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),' datasource with the string "No tail number."'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT "Tail_Number" AS "original_column",\n  NVL("Tail_Number", \'No tail number\') AS "remove_null"\nFROM "flight-carriers"\nWHERE "OriginState" = \'CT\'\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_column")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"remove_null")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"N951DL")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"N951DL"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"No tail number")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#other-scalar-functions"},"Learn more")),(0,r.kt)("h2",{id:"parse_json"},"PARSE_JSON"),(0,r.kt)("p",null,"Parses an expression into a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object. "),(0,r.kt)("p",null,"The function deserializes JSON values when processing them, translating stringified JSON into a nested structure.\nIf the input is invalid JSON or not a ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR"),", it returns an error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"PARSE_JSON(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object ",(0,r.kt)("inlineCode",{parentName:"p"},"gus")," from a string of fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  PARSE_JSON(\'{"name":"Gus","email":"gus_cat@example.com","type":"Pet"}\') as gus\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"gus")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"name":"Gus","email":"gus_cat@example.com","type":"Pet"}')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"parse_long"},"PARSE_LONG"),(0,r.kt)("p",null,"Converts a string into a long(BIGINT) with the given radix, or into DECIMAL(base 10) if a radix is not provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:"),(0,r.kt)("inlineCode",{parentName:"li"},"PARSE_LONG(string[, radix])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the string representation of the binary, radix 2, number ",(0,r.kt)("inlineCode",{parentName:"p"},"1100")," into its long (BIGINT) equivalent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '1100' AS \"binary_as_string\", \n  PARSE_LONG('1110', 2) AS \"bigint_value\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"binary_as_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"bigint_value")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1100")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"14")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"percent_rank"},"PERCENT_RANK"),(0,r.kt)("p",null,"Returns the relative rank of the row calculated as a percentage according to the formula: ",(0,r.kt)("inlineCode",{parentName:"p"},"RANK() OVER (window) / COUNT(1) OVER (window)"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"PERCENT_RANK()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the percent rank within the window for flights by airline from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    PERCENT_RANK() OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "pct_rank"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pct_rank")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.3333333333333333"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.6666666666666666"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.6666666666666666"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.5"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.5")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"position"},"POSITION"),(0,r.kt)("p",null,"Returns the one-based index position of a substring within an expression, optionally starting from a given one-based index. If ",(0,r.kt)("inlineCode",{parentName:"p"},"substring")," is not found, returns 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"POSITION(substring IN expr [FROM startingIndex])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the one-based index of the substring ",(0,r.kt)("inlineCode",{parentName:"p"},"PR")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource starting from index 5."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city",\n  POSITION(\'PR\' IN "OriginCityName" FROM 5) AS "index"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"index")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boston, MA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"power"},"POWER"),(0,r.kt)("p",null,"Calculates a numerical expression raised to the specified power."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"POWER(base, exponent)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example raises 5 to the power of 2."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT POWER(5, 2) AS "power"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"power")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"25")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"radians"},"RADIANS"),(0,r.kt)("p",null,"Converts an angle from degrees to radians."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"RADIANS(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts an angle of ",(0,r.kt)("inlineCode",{parentName:"p"},"180")," degrees to radians"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT RADIANS(180) AS "radians"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"radians")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3.141592653589793")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"rank"},"RANK"),(0,r.kt)("p",null,"Returns the rank with gaps for a row within a window. For example, if two rows tie for rank 1, the next rank is 3."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"RANK()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the rank within the window for flights by airline from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    RANK() OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "rank"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"rank")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"regexp_extract"},"REGEXP_EXTRACT"),(0,r.kt)("p",null,"Apply regular expression ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," and extract the Nth capture group. If ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is unspecified or zero, returns the first substring that matches the pattern. Returns null if there is no matching pattern."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REGEXP_EXTRACT(expr, pattern[, N])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example uses regular expressions to find city names inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource by matching what comes before the comma."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city",\n  REGEXP_EXTRACT("OriginCityName", \'([^,]+)\', 0) AS "pattern_match"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pattern_match")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"regexp_like"},"REGEXP_LIKE"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the regular expression ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," finds a match in ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),". Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REGEXP_LIKE(expr, pattern)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," when the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," has a city name containing a space."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city",\n  REGEXP_LIKE("OriginCityName", \'[A-Za-z]+\\s[A-Za-z]+\') AS "pattern_found"\nFROM "flight-carriers"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pattern_found")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Boston, MA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"regexp_replace"},"REGEXP_REPLACE"),(0,r.kt)("p",null,"Replaces all occurrences of a regular expression in a string expression with a replacement string. Refer to capture groups in the replacement string using ",(0,r.kt)("inlineCode",{parentName:"p"},"$group")," syntax. For example: ",(0,r.kt)("inlineCode",{parentName:"p"},"$1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"$2"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REGEXP_REPLACE(expr, pattern, replacement)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example matches three consecutive words, where each word is its own capture group, and replaces the matched words with the word in the second capture group punctuated with exclamation marks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'foo bar baz' AS \"original_string\",\n  REGEXP_REPLACE('foo bar baz', '([A-Za-z]+) ([A-Za-z]+) ([A-Za-z]+)' , '$2!') AS \"modified_string\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"modified_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"foo bar baz")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bar!")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"repeat"},"REPEAT"),(0,r.kt)("p",null,"Repeats the string expression ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," times, where ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is an integer."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REPEAT(expr, N)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the string expression ",(0,r.kt)("inlineCode",{parentName:"p"},"abc")," repeated ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," times."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'abc' AS \"original_string\",\n  REPEAT('abc', 3) AS \"with_repetition\"\n")),(0,r.kt)("p",null,"Returns the following: "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"with_repetition")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abcabcabc")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"replace"},"REPLACE"),(0,r.kt)("p",null,"Replaces instances of a substring with a replacement string in the given expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REPLACE(expr, substring, replacement)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example replaces instances of the substring ",(0,r.kt)("inlineCode",{parentName:"p"},"abc")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"XYZ"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'abc 123 abc 123' AS \"original_string\",\n   REPLACE('abc 123 abc 123', 'abc', 'XYZ') AS \"modified_string\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"modified_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc 123 abc 123")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"XYZ 123 XYZ 123")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"reverse"},"REVERSE"),(0,r.kt)("p",null,"Reverses the given expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"REVERSE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example reverses the string expression ",(0,r.kt)("inlineCode",{parentName:"p"},"abc"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'abc' AS \"original_string\",\n  REVERSE('abc') AS \"reversal\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"reversal")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"cba")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"right"},"RIGHT"),(0,r.kt)("p",null,"Returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," rightmost characters of an expression, where ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is an integer value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"RIGHT(expr, N)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," rightmost characters of the expression ",(0,r.kt)("inlineCode",{parentName:"p"},"ABCDEFG"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  'ABCDEFG' AS \"expression\",\n  RIGHT('ABCDEFG', 3) AS \"rightmost_characters\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"expression")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"rightmost_characters")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ABCDEFG")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"EFG")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"round"},"ROUND"),(0,r.kt)("p",null,"Calculates the rounded value for a numerical expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"ROUND(expr[, digits])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following applies the ROUND function to 0 decimal points on the ",(0,r.kt)("inlineCode",{parentName:"p"},"pickup_longitude")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "pickup_longitude" AS "pickup_longitude",\n  ROUND("pickup_longitude", 0) as "rounded_pickup_longitude"\nFROM "taxi-trips"\nWHERE "pickup_longitude" IS NOT NULL\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pickup_longitude")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"rounded_pickup_longitude")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-73.9377670288086")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-74")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"row_number"},"ROW_NUMBER"),(0,r.kt)("p",null,"Returns the number of the row within the window starting from 1."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"ROW_NUMBER()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Window")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the row number within the window for flights by airline from two airports on a single day."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT FLOOR("__time" TO DAY)  AS "flight_day",\n    "Origin" AS "airport",\n    "Reporting_Airline" as "airline",\n    COUNT("Flight_Number_Reporting_Airline") as "num_flights",\n    ROW_NUMBER() OVER (PARTITION BY "Origin" ORDER BY COUNT("Flight_Number_Reporting_Airline") DESC) AS "row_num"\nFROM "flight-carriers"\nWHERE FLOOR("__time" TO DAY) = \'2005-11-01\'\n    AND "Origin" IN (\'KOA\', \'LIH\')\nGROUP BY 1, 2, 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_day")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"airline")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"num_flights")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"row_num")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"11")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"KOA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NW")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"HA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"15")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LIH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"UA")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"3")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-window-functions#window-function-reference"},"Learn more")),(0,r.kt)("h2",{id:"rpad"},"RPAD"),(0,r.kt)("p",null,"Returns a string of size ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),". When the length of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," is less than ",(0,r.kt)("inlineCode",{parentName:"p"},"length"),", right pads ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"chars"),", which defaults to the space character. Truncates ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," is shorter than the length of ",(0,r.kt)("inlineCode",{parentName:"p"},"expr"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"RPAD(expr, length[, chars])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example right pads the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginStateName")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to return a total of 11 characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginStateName" AS "origin_state",\n  RPAD("OriginStateName", 11, \'+\') AS "add_right_padding"\nFROM "flight-carriers"\nLIMIT 3\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"add_right_padding")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Puerto Rico")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Puerto Rico"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Massachusetts")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Massachuset"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Florida")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Florida++++")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"rtrim"},"RTRIM"),(0,r.kt)("p",null,"Trims characters from the trailing end of an expression. Defaults ",(0,r.kt)("inlineCode",{parentName:"p"},"chars")," to a space if none is provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"RTRIM(expr[, chars])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example trims the ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," characters from the trailing end of the string expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '___abc___' AS \"original_string\",\n  RTRIM('___abc___', '_') AS \"trim_end\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"trim_end")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"___abc___")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"___abc")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"safe_divide"},"SAFE_DIVIDE"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," divided by ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),", guarded on division by 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SAFE_DIVIDE(x, y)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates divisions of integer ",(0,r.kt)("inlineCode",{parentName:"p"},"78")," by integer ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT SAFE_DIVIDE(78, 10) AS "safe_division"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"safe_division")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"7")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"sin"},"SIN"),(0,r.kt)("p",null,"Calculates the trigonometric sine of an angle expressed in radians."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SIN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the sine of angle ",(0,r.kt)("inlineCode",{parentName:"p"},"PI/3")," radians."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT SIN(PI / 3) AS "sine"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sine")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0.8660254037844386")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"sqrt"},"SQRT"),(0,r.kt)("p",null,"Calculates the square root of a numeric expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SQRT(<NUMERIC>)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the square root of 25."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT SQRT(25) AS "square_root"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"square_root")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"stddev"},"STDDEV"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#stddev_samp"},(0,r.kt)("inlineCode",{parentName:"a"},"STDDEV_SAMP")),".",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"STDDEV(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"stddev_pop"},"STDDEV_POP"),(0,r.kt)("p",null,"Calculates the population standard deviation of a set of values.",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"STDDEV_POP(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the population standard deviation for minutes of delay for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT STDDEV_POP("DepDelayMinutes") AS sd_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sd_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"27.083557")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"stddev_samp"},"STDDEV_SAMP"),(0,r.kt)("p",null,"Calculates the sample standard deviation of a set of values.",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"STDDEV_SAMP(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the sample standard deviation for minutes of delay for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT STDDEV_SAMP("DepDelayMinutes") AS sd_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"sd_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"27.083811")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"string_agg"},"STRING_AGG"),(0,r.kt)("p",null,"Collects all values of an expression into a single string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"STRING_AGG(expr, separator, [size])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns all the distinct airlines from ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," as a single space-delimited string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  STRING_AGG(DISTINCT "Reporting_Airline", \' \') AS "AllCarriers"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"AllCarriers")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AA AS B6 CO DH DL EV F9 FL HA HP MQ NW OH OO TZ UA US WN XE")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"string_format"},"STRING_FORMAT"),(0,r.kt)("p",null,"Returns a string formatted in the manner of Java's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Object...-"},"String.format"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"STRING_FORMAT(pattern[, args...])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example uses Java String format to pass in ",(0,r.kt)("inlineCode",{parentName:"p"},"Flight_Number_Reporting_Airline")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"origin_airport")," columns, from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource, as arguments into the string. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "Flight_Number_Reporting_Airline" AS "flight_number",\n  "Origin" AS "origin_airport",\n  STRING_FORMAT(\'Flight No.%d departing from %s\', "Flight_Number_Reporting_Airline", "Origin") AS "departure_announcement"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"flight_number")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_airport")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"departure_announcement")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"314")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SJU")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Flight No.314 departing from SJU")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"string_to_array"},"STRING_TO_ARRAY"),(0,r.kt)("p",null,"Splits the string into an array of substrings using the specified delimiter. The delimiter must be a valid regular expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"STRING_TO_ARRAY(string, delimiter)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Array")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-array-functions"},"Learn more")),(0,r.kt)("h2",{id:"string_to_mv"},"STRING_TO_MV"),(0,r.kt)("p",null,"Splits ",(0,r.kt)("inlineCode",{parentName:"p"},"str1")," into an multi-value string on the delimiter specified by ",(0,r.kt)("inlineCode",{parentName:"p"},"str2"),", which is a regular expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"STRING_TO_MV(str1, str2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Multi-value string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example splits a street address by whitespace characters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT STRING_TO_MV('123 Rose Lane', '\\s+') AS mv\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"mv")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["123","Rose","Lane"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-multivalue-string-functions"},"Learn more")),(0,r.kt)("h2",{id:"strlen"},"STRLEN"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#length"},(0,r.kt)("inlineCode",{parentName:"a"},"LENGTH")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"STRLEN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"strpos"},"STRPOS"),(0,r.kt)("p",null,"Returns the one-based index position of a substring within an expression. If ",(0,r.kt)("inlineCode",{parentName:"p"},"substring")," is not found, returns 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"STRPOS(expr, substring)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns the one-based index position of ",(0,r.kt)("inlineCode",{parentName:"p"},"World"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'Hello World!' AS \"original_string\",\n  STRPOS('Hello World!', 'World') AS \"index\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"index")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Hello World!")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"7")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"substr"},"SUBSTR"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#substring"},(0,r.kt)("inlineCode",{parentName:"a"},"SUBSTRING")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SUBSTR(expr, index[, length])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"substring"},"SUBSTRING"),(0,r.kt)("p",null,"Returns a substring of the expression starting at a given one-based index. If ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," is omitted, extracts characters to the end of the string, otherwise returns a substring of ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," characters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"SUBSTRING(expr, index[, length])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example extracts a substring from the string expression ",(0,r.kt)("inlineCode",{parentName:"p"},"abcdefghi")," of length ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," starting at index ",(0,r.kt)("inlineCode",{parentName:"p"},"4")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  'abcdefghi' AS \"original_string\",\n  SUBSTRING('abcdefghi', 4, 3) AS \"substring\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"substring")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abcdefghi")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"def")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"sum"},"SUM"),(0,r.kt)("p",null,"Calculates the sum of a set of values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"SUM(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the total minutes of delay for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT SUM("DepDelayMinutes") AS tot_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tot_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"475735")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"tan"},"TAN"),(0,r.kt)("p",null,"Calculates the trigonometric tangent of an angle expressed in radians."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TAN(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the tangent of angle ",(0,r.kt)("inlineCode",{parentName:"p"},"PI/3")," radians."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT TAN(PI / 3) AS "tangent"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"tangent")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.7320508075688767")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"textcat"},"TEXTCAT"),(0,r.kt)("p",null,"Concatenates two string expressions."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TEXTCAT(expr, expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example concatenates the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginState")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to ",(0,r.kt)("inlineCode",{parentName:"p"},", USA"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "OriginState" AS "origin_state",\n  TEXTCAT("OriginState", \', USA\') AS "concatenate_state_with_USA"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_state")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"concatenate_state_with_USA")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PR, USA")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"theta_sketch_estimate"},"THETA_SKETCH_ESTIMATE"),(0,r.kt)("p",null,"Returns the distinct count estimate from a Theta sketch. The ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," argument must return a Theta sketch."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"THETA_SKETCH_ESTIMATE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the distinct number of tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT THETA_SKETCH_ESTIMATE( DS_THETA("Tail_Number") ) AS "estimate"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4667")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"theta_sketch_estimate_with_error_bounds"},"THETA_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS"),(0,r.kt)("p",null,"Returns the distinct count estimate and error bounds from a Theta sketch. The ",(0,r.kt)("inlineCode",{parentName:"p"},"expr")," argument must return a Theta sketch. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"errorBoundsStdDev")," to specify the number of standard error bound deviations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"THETA_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS(expr, errorBoundsStdDev)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Details"),(0,r.kt)("p",null,"The following example estimates the number of distinct tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tail_Number")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource with error bounds at plus or minus one standard deviation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT THETA_SKETCH_ESTIMATE_WITH_ERROR_BOUNDS(DS_THETA("Tail_Number", 4096), 1) AS "estimate_with_error"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_with_error")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"estimate":4691.201541339628,"highBound":4718.4577807143205,"lowBound":4664.093801991001,"numStdDev":1}')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"theta_sketch_intersect"},"THETA_SKETCH_INTERSECT"),(0,r.kt)("p",null,"Returns an intersection of Theta sketches. Each input expression must return a Theta sketch. See ",(0,r.kt)("a",{parentName:"p",href:"../development/extensions-core/datasketches-theta#aggregator"},"DataSketches Theta Sketch module")," for a description of optional parameters. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"THETA_SKETCH_INTERSECT([size], expr0, expr1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the intersection of distinct tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource for flights originating in CA, TX, and NY."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  THETA_SKETCH_ESTIMATE(\n    THETA_SKETCH_INTERSECT( \n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'CA\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'TX\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'NY\')\n    )\n  ) AS "estimate_intersection"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_intersection")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1701")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"theta_sketch_not"},"THETA_SKETCH_NOT"),(0,r.kt)("p",null,"Returns a set difference of Theta sketches. Each input expression must return a Theta sketch. See ",(0,r.kt)("a",{parentName:"p",href:"../development/extensions-core/datasketches-theta#aggregator"},"DataSketches Theta Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"THETA_SKETCH_NOT([size], expr0, expr1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the number of distinct tail numbers in the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource for flights not originating in CA, TX, or NY."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  THETA_SKETCH_ESTIMATE(\n    THETA_SKETCH_NOT( \n      DS_THETA("Tail_Number"),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'CA\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'TX\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'NY\')\n    )\n  ) AS "estimate_not"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_not")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"145")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"theta_sketch_union"},"THETA_SKETCH_UNION"),(0,r.kt)("p",null,"Returns a union of Theta sketches. Each input expression must return a Theta sketch. See ",(0,r.kt)("a",{parentName:"p",href:"../development/extensions-core/datasketches-theta#aggregator"},"DataSketches Theta Sketch module")," for a description of optional parameters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:"),(0,r.kt)("inlineCode",{parentName:"li"},"THETA_SKETCH_UNION([size], expr0, expr1, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, sketch")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example estimates the number of distinct tail numbers that depart from CA, TX, or NY."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  THETA_SKETCH_ESTIMATE(\n    THETA_SKETCH_UNION( \n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'CA\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'TX\'),\n      DS_THETA("Tail_Number") FILTER(WHERE "OriginState" = \'NY\')\n    )\n  ) AS "estimate_union"\nFROM "flight-carriers"\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"estimate_union")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4522")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#sketch-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_ceil"},"TIME_CEIL"),(0,r.kt)("p",null,"Rounds up a timestamp to a given ISO 8601 time period. You can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," to provide a reference timestamp from which to start rounding. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_CEIL(timestamp_expr, period[, origin[, timezone]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example rounds up the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource to the nearest 45th minute in reference to the timestamp ",(0,r.kt)("inlineCode",{parentName:"p"},"2013-08-01 08:0:00"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_timestamp",\n  TIME_CEIL("__time", \'PT45M\', TIMESTAMP \'2013-08-01 08:0:00\') AS "time_ceiling"\nFROM "taxi-trips"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_timestamp")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"time_ceiling")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:45:00.000Z"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T09:13:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T09:30:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_extract"},"TIME_EXTRACT"),(0,r.kt)("p",null,"Extracts the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"unit")," from the timestamp and returns it as a number. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_EXTRACT(timestamp_expr[, unit[, timezone]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example extracts the hour from the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column in the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource and offsets its timezone by ",(0,r.kt)("inlineCode",{parentName:"p"},"-04:00")," hours."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_timestamp",\n  TIME_EXTRACT("__time", \'hour\', \'-04:00\') AS "extract_hour"\nFROM "taxi-trips"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_timestamp")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"extract_hour")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"4"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T09:13:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"5")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_floor"},"TIME_FLOOR"),(0,r.kt)("p",null,"Rounds down a timestamp to a given ISO 8601 time period. You can specify ",(0,r.kt)("inlineCode",{parentName:"p"},"origin")," to provide a reference timestamp from which to start rounding. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_FLOOR(timestamp_expr, period[, origin[, timezone]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example rounds down the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource to the nearest 45th minute in reference to the timestamp ",(0,r.kt)("inlineCode",{parentName:"p"},"2013-08-01 08:0:00"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_timestamp",\n  TIME_FLOOR("__time", \'PT45M\', TIMESTAMP \'2013-08-01 08:0:00\') AS "time_floor"\nFROM "taxi-trips"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_timestamp")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"time_floor")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:00:00.000Z"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T09:13:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:45:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_format"},"TIME_FORMAT"),(0,r.kt)("p",null,"Formats a timestamp as a string in a provided ",(0,r.kt)("a",{parentName:"p",href:"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html"},"Joda DateTimeFormat pattern"),". If no pattern is provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," defaults to ISO 8601. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_FORMAT(timestamp_expr[, pattern[, timezone]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example formats the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource into a string format and offsets the result's timezone by ",(0,r.kt)("inlineCode",{parentName:"p"},"-05:00")," hours."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "__time" AS "original_time",\nTIME_FORMAT( "__time", \'dd-MM-YYYY hh:mm aa zzz\', \'-05:00\') AS "string"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"01-08-2013 03:14 AM -05:00")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_in_interval"},"TIME_IN_INTERVAL"),(0,r.kt)("p",null,"Returns true if a timestamp is contained within a particular interval. Intervals must be formatted as a string literal containing any ISO 8601 interval. The start instant of an interval is inclusive, and the end instant is exclusive."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_IN_INTERVAL(timestamp_expr, interval)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example returns true when a timestamp in the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column of the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource is within a hour interval starting from ",(0,r.kt)("inlineCode",{parentName:"p"},"2013-08-01T08:00:00"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_time",\n  TIME_IN_INTERVAL("__time", \'2013-08-01T08:00:00/PT1H\') AS "in_interval"\nFROM "taxi-trips"\nLIMIT 2\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"in_interval")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T09:13:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_parse"},"TIME_PARSE"),(0,r.kt)("p",null,"Parses a string into a timestamp using a given ",(0,r.kt)("a",{parentName:"p",href:"http://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html"},"Joda DateTimeFormat pattern"),". If no pattern is provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern")," defaults to ISO 8601. Returns NULL if string cannot be parsed. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_PARSE(string_expr[, pattern[, timezone]])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example parses the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlightDate")," STRING column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource into a valid timestamp with an offset of ",(0,r.kt)("inlineCode",{parentName:"p"},"-05:00")," hours."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "FlightDate" AS "original_string",\n  TIME_PARSE("FlightDate", \'YYYY-MM-dd\', \'-05:00\') AS "timestamp"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"timestamp")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2005-11-01T05:00:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"time_shift"},"TIME_SHIFT"),(0,r.kt)("p",null,"Shifts a timestamp by a given number of time units. The ",(0,r.kt)("inlineCode",{parentName:"p"},"period")," parameter can be any ISO 8601 period. The ",(0,r.kt)("inlineCode",{parentName:"p"},"step")," parameter can be negative. If provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"timezone")," should be a time zone name like ",(0,r.kt)("inlineCode",{parentName:"p"},"America/Los_Angeles")," or an offset like ",(0,r.kt)("inlineCode",{parentName:"p"},"-08:00"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIME_SHIFT(timestamp_expr, period, step[, timezone])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example shifts the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource back by 24 hours."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "__time" AS "original_timestamp",\n  TIME_SHIFT("__time", \'PT1H\', -24) AS "shift_back"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_timestamp")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"shift_back")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-07-31T08:14:37.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"timestamp_to_millis"},"TIMESTAMP_TO_MILLIS"),(0,r.kt)("p",null,"Returns the number of milliseconds since epoch for the given timestamp."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMP_TO_MILLIS(timestamp_expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource into milliseconds since epoch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "__time" AS "original_time",\n  TIMESTAMP_TO_MILLIS("__time") AS "miliseconds"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"miliseconds")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1375344877000")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"timestampadd"},"TIMESTAMPADD"),(0,r.kt)("p",null,"Add a ",(0,r.kt)("inlineCode",{parentName:"p"},"unit")," of time multiplied by ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMPADD(unit, count, timestamp)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example adds five months to the timestamp ",(0,r.kt)("inlineCode",{parentName:"p"},"2000-01-01 00:00:00"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  TIMESTAMP '2000-01-01 00:00:00' AS \"original_time\",\n  TIMESTAMPADD (MONTH, 5, TIMESTAMP '2000-01-01 00:00:00') AS \"new_time\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"new_time")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2000-01-01T00:00:00.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2000-06-01T00:00:00.000Z")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"timestampdiff"},"TIMESTAMPDIFF"),(0,r.kt)("p",null,"Returns the difference between two timestamps in a given unit."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TIMESTAMPDIFF(unit, timestamp1, timestamp2)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, date and time")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the taxi trip length in minutes by subtracting the ",(0,r.kt)("inlineCode",{parentName:"p"},"__time")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dropoff_datetime")," column in the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "__time" AS "pickup_time",\n  "dropoff_datetime" AS "dropoff_time",\n  TIMESTAMPDIFF (MINUTE, "__time", TIME_PARSE("dropoff_datetime")) AS "trip_length"\nFROM "taxi-trips"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following: "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pickup_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"dropoff_time")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"trip_length")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01T08:14:37.000Z")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"2013-08-01 09:09:06")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"54")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#date-and-time-functions"},"Learn more")),(0,r.kt)("h2",{id:"to_json_string"},"TO_JSON_STRING"),(0,r.kt)("p",null,"Serializes an expression into a JSON string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TO_JSON_STRING(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example writes the distinct column names in the ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," nested column to a JSON string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  TO_JSON_STRING(ARRAY_CONCAT_AGG(DISTINCT JSON_KEYS(event, '$.'))) as json_string\nFROM \"kttm_nested\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"json_string")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'["error","layer","percentage","saveNumber","type","url","userAgent"]')))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"trim"},"TRIM"),(0,r.kt)("p",null,"Trims the leading and/or trailing characters of an expression. Defaults ",(0,r.kt)("inlineCode",{parentName:"p"},"chars")," to a space if none is provided. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"BOTH")," if no directional argument is provided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TRIM([BOTH|LEADING|TRAILING] [chars FROM] expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example trims ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," characters from both ends of the string expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n  '___abc___' AS \"original_string\",\n  TRIM( BOTH '_' FROM '___abc___') AS \"trim_expression\"\n")),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"original_string")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"trim_expression")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"___abc___")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"abc")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"trunc"},"TRUNC"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#truncate"},(0,r.kt)("inlineCode",{parentName:"a"},"TRUNCATE")),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TRUNC(expr[, digits])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"truncate"},"TRUNCATE"),(0,r.kt)("p",null,"Truncates a numerical expression to a specific number of decimal digits."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TRUNCATE(expr[, digits])")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, numeric")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following applies the TRUNCATE function to 1 decimal place on the ",(0,r.kt)("inlineCode",{parentName:"p"},"pickup_longitude")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"taxi-trips")," datasource."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  "pickup_longitude" as "pickup_longitude",\n  TRUNCATE("pickup_longitude", 1) as "truncate_pickup_longitude"\nFROM "taxi-trips"\nWHERE "pickup_longitude" IS NOT NULL\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"pickup_longitude")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"truncate_pickup_longitude")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-73.9377670288086")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-73.9")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#numeric-functions"},"Learn more")),(0,r.kt)("h2",{id:"try_parse_json"},"TRY_PARSE_JSON"),(0,r.kt)("p",null,"Parses an expression into a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object."),(0,r.kt)("p",null,"This function deserializes JSON values when processing them, translating stringified JSON into a nested structure.\nIf the input is invalid JSON or not a ",(0,r.kt)("inlineCode",{parentName:"p"},"VARCHAR"),", it returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL")," value."),(0,r.kt)("p",null,"You can use this function instead of ",(0,r.kt)("a",{parentName:"p",href:"#parse_json"},"PARSE_JSON")," to insert a null value when processing invalid data, instead of producing an error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"TRY_PARSE_JSON(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," JSON")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLEX<json>")," object ",(0,r.kt)("inlineCode",{parentName:"p"},"gus")," from a string of fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TRY_PARSE_JSON(\'{"name":"Gus","email":"gus_cat@example.com","type":"Pet"}\') as gus\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"gus")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'{"name":"Gus","email":"gus_cat@example.com","type":"Pet"}'))))),(0,r.kt)("p",null,"The following example contains invalid data ",(0,r.kt)("inlineCode",{parentName:"p"},"x:x"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT\n  TRY_PARSE_JSON(\'{"name":"Gus","email":"gus_cat@example.com","type":"Pet",x:x}\') as gus\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"gus")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-json-functions"},"Learn more")),(0,r.kt)("h2",{id:"upper"},"UPPER"),(0,r.kt)("p",null,"Returns the expression in uppercase."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax:")," ",(0,r.kt)("inlineCode",{parentName:"li"},"UPPER(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Scalar, string")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"OriginCityName")," column from the ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers")," datasource to uppercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT \n  "OriginCityName" AS "origin_city",\n  UPPER("OriginCityName") AS "uppercase"\nFROM "flight-carriers"\nLIMIT 1\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"origin_city")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"uppercase")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"San Juan, PR")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SAN JUAN, PR")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-scalar#string-functions"},"Learn more")),(0,r.kt)("h2",{id:"var_pop"},"VAR_POP"),(0,r.kt)("p",null,"Calculates the population variance of a set of values.",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"VAR_POP(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the population variance for minutes of delay by a particular airlines in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT VAR_POP("DepDelayMinutes") AS varpop_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"varpop_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"733.51908")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"var_samp"},"VAR_SAMP"),(0,r.kt)("p",null,"Calculates the sample variance of a set of values.",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"VAR_SAMP(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example"),(0,r.kt)("p",null,"The following example calculates the sample variance for minutes of delay for an airline in ",(0,r.kt)("inlineCode",{parentName:"p"},"flight-carriers"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT VAR_SAMP("DepDelayMinutes") AS varsamp_delay\nFROM "flight-carriers"\nWHERE "Reporting_Airline" = \'AA\'\n')),(0,r.kt)("p",null,"Returns the following:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"th"},"varsamp_delay")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"733.53286")))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")),(0,r.kt)("h2",{id:"variance"},"VARIANCE"),(0,r.kt)("p",null,"Alias for ",(0,r.kt)("a",{parentName:"p",href:"#var_samp"},(0,r.kt)("inlineCode",{parentName:"a"},"VAR_SAMP")),".",(0,r.kt)("br",{parentName:"p"}),"\n","Requires the ",(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/development/extensions-core/stats"},(0,r.kt)("inlineCode",{parentName:"a"},"druid-stats")," extension"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Syntax"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"VARIANCE(expr)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Function type:")," Aggregation")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/32.0.0/querying/sql-aggregations"},"Learn more")))}s.isMDXComponent=!0}}]);